{
  "modelType": 1,
  "algorithms": [
    {
      "algorithm": {
        "algorithmType": 0,
        "description": "",
        "derivedFields": [
          {
            "fieldType": 1,
            "name": "Age_cont",
            "opType": 1,
            "equation": "derived = obj['age'];",
            "derivedFrom": [
              {
                "name": "age",
                "displayName": "",
                "extensions": {
                  "question": "What is your age?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 20,
                "maxValue": 99
              }
            ],
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "Age_spline",
            "opType": 1,
            "equation":
              "derived = userFunctions['Age_spline.fun'](obj['Age_cont'], 65, userFunctions, func);",
            "derivedFrom": ["Age_cont"],
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "drk_drkm2",
            "opType": 1,
            "equation":
              "derived = userFunctions['NA0.fun'](obj['drk_drkm'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "drk_drkm",
                "displayName": "",
                "extensions": {
                  "question":
                    "How many drinks did you have last week? (Monday?)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "drk_drkt2",
            "opType": 1,
            "equation":
              "derived = userFunctions['NA0.fun'](obj['drk_drkt'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "drk_drkt",
                "displayName": "",
                "extensions": {
                  "question":
                    "How many drinks did you have last week? (Tuesday?)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "drk_drkw2",
            "opType": 1,
            "equation":
              "derived = userFunctions['NA0.fun'](obj['drk_drkw'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "drk_drkw",
                "displayName": "",
                "extensions": {
                  "question":
                    "How many drinks did you have last week? (Wednesday?)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "drk_drkr2",
            "opType": 1,
            "equation":
              "derived = userFunctions['NA0.fun'](obj['drk_drkr'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "drk_drkr",
                "displayName": "",
                "extensions": {
                  "question":
                    "How many drinks did you have last week? (Thursday?)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "drk_drkf2",
            "opType": 1,
            "equation":
              "derived = userFunctions['NA0.fun'](obj['drk_drkf'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "drk_drkf",
                "displayName": "",
                "extensions": {
                  "question":
                    "How many drinks did you have last week? (Friday)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "drk_drksa2",
            "opType": 1,
            "equation":
              "derived = userFunctions['NA0.fun'](obj['drk_drksa'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "drk_drksa",
                "displayName": "",
                "extensions": {
                  "question":
                    "How many drinks did you have last week? (Saturday?)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "drk_drksu2",
            "opType": 1,
            "equation":
              "derived = userFunctions['NA0.fun'](obj['drk_drksu'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "drk_drksu",
                "displayName": "",
                "extensions": {
                  "question":
                    "How many drinks did you have last week? (Sunday?)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "DrinksLastWeek",
            "opType": 1,
            "equation":
              "derived = userFunctions['DrinksLastWeek.fun'](obj['drk_drkm2'], obj['drk_drkt2'], obj['drk_drkw2'], obj['drk_drkr2'], obj['drk_drkf2'], obj['drk_drksa2'], obj['drk_drksu2'], obj['dany'], userFunctions, func);",
            "derivedFrom": [
              "drk_drkm2",
              "drk_drkt2",
              "drk_drkw2",
              "drk_drkr2",
              "drk_drkf2",
              "drk_drksa2",
              "drk_drksu2",
              {
                "name": "dany",
                "displayName": "",
                "extensions": {
                  "question":
                    "Thinking back over the past week did you have a drink of beer, wine, liquor or any other alcoholic beverage?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "dany1", "displayValue": "Yes" },
                  { "value": "dany2", "displayValue": "No" }
                ]
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "DrinksLastWeek_cont",
            "opType": 1,
            "equation":
              "derived = userFunctions['Max.fun'](obj['DrinksLastWeek'], 53, userFunctions, func);",
            "derivedFrom": ["DrinksLastWeek"],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "Binge",
            "opType": 1,
            "equation":
              "derived = userFunctions['Binge.fun'](obj['db'], obj['dany'], obj['drk_drkm2'], obj['drk_drkt2'], obj['drk_drkw2'], obj['drk_drkr2'], obj['drk_drkf2'], obj['drk_drksa2'], obj['drk_drksu2'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "db",
                "displayName": "",
                "extensions": {
                  "question":
                    "How often in the past 12 months have you had 5 or more drinks on any one ocassion?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "db1", "displayValue": "Never" },
                  { "value": "db2", "displayValue": "Less than once a month" },
                  { "value": "db3", "displayValue": "Once a month" },
                  { "value": "db4", "displayValue": "2 to 3 times  amonth" },
                  { "value": "db5", "displayValue": "Once a week" },
                  { "value": "db6", "displayValue": "More than once a week" }
                ]
              },
              {
                "name": "dany",
                "displayName": "",
                "extensions": {
                  "question":
                    "Thinking back over the past week did you have a drink of beer, wine, liquor or any other alcoholic beverage?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "dany1", "displayValue": "Yes" },
                  { "value": "dany2", "displayValue": "No" }
                ]
              },
              "drk_drkm2",
              "drk_drkt2",
              "drk_drkw2",
              "drk_drkr2",
              "drk_drkf2",
              "drk_drksa2",
              "drk_drksu2"
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "AlcoholType",
            "opType": "categorical",
            "equation":
              "derived = userFunctions['AlcoholType.fun'](obj['Binge'], obj['dany'], obj['DrinksLastWeek_cont'], 3, 21, userFunctions, func);",
            "derivedFrom": [
              "Binge",
              {
                "name": "dany",
                "displayName": "",
                "extensions": {
                  "question":
                    "Thinking back over the past week did you have a drink of beer, wine, liquor or any other alcoholic beverage?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "dany1", "displayValue": "Yes" },
                  { "value": "dany2", "displayValue": "No" }
                ]
              },
              "DrinksLastWeek_cont"
            ],
            "displayName": "Alcohol Status",
            "extensions": {
              "recommended": "true",
              "units": "NA",
              "description": "Type of drinker"
            },
            "categories": [
              {
                "value": "0",
                "displayValue": "Non/light drinker",
                "description": "Males: <4 drinks/week; Females: <3 drinks/week"
              },
              {
                "value": "1",
                "displayValue": "Moderate drinker",
                "description":
                  "Males: 4-21 drinks/week; Females: 3 to 14 drinks/week"
              },
              {
                "value": "2",
                "displayValue": "Heavy drinker",
                "description":
                  "Males: >21 drinks/week; Females: >14 drinks/week"
              }
            ]
          },
          {
            "fieldType": 1,
            "name": "AlcoholMod_cat",
            "opType": "categorical",
            "equation":
              "derived = userFunctions['AlcoholMod_cat.fun'](obj['AlcoholType'], userFunctions, func);",
            "derivedFrom": ["AlcoholType"],
            "displayName": "Mod. alcohol",
            "extensions": {
              "units": "NA",
              "description": "Moderate drinker- Dummy variable"
            },
            "categories": [
              {
                "value": "1",
                "displayValue": "Moderate drinker",
                "description":
                  "Males: 4-21 drinks/week; Females: 3 to 14 drinks/week"
              },
              { "value": "0", "displayValue": "Else", "description": "Else" }
            ]
          },
          {
            "fieldType": 1,
            "name": "AlcoholHeavy_cat",
            "opType": "categorical",
            "equation":
              "derived = userFunctions['AlcoholHeavy_cat.fun'](obj['AlcoholType'], userFunctions, func);",
            "derivedFrom": ["AlcoholType"],
            "displayName": "Heavy alcohol",
            "extensions": {
              "units": "NA",
              "description": "Heavy drinker- Dummy variable"
            },
            "categories": [
              {
                "value": "1",
                "displayValue": "Heavy drinker",
                "description":
                  "Males: >21 drinks/week; Females: >14 drinks/week"
              },
              { "value": "0", "displayValue": "Else", "description": "Else" }
            ]
          },
          {
            "fieldType": 1,
            "name": "QuitTime",
            "opType": "continuous",
            "equation":
              "derived = userFunctions['QuitTime.fun'](obj['stpn'], obj['stpny'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "stpn",
                "displayName": "",
                "extensions": {
                  "question": "When did you stop smoking daily?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  {
                    "value": "stpn1",
                    "displayValue": "Less than one year ago?"
                  },
                  {
                    "value": "stpn2",
                    "displayValue": "1 year to less than 2 years ago?"
                  },
                  {
                    "value": "stpn3",
                    "displayValue": "2 years to less than 3 years ago?"
                  },
                  { "value": "stpn4", "displayValue": "3 or more years ago?" }
                ]
              },
              {
                "name": "stpny",
                "displayName": "",
                "extensions": {
                  "question": "How many years ago was it?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 3,
                "maxValue": null
              }
            ],
            "displayName": "Smoking Quit Time",
            "extensions": {
              "recommended": "true",
              "units": "years",
              "description":
                "Time since quitting smoking. For current and non-smokers, leave missing"
            },
            "minValue": 0,
            "maxValue": null
          },
          {
            "fieldType": 1,
            "name": "TypeOfSmoker",
            "opType": 1,
            "equation":
              "derived = userFunctions['TypeOfSmoker.fun'](obj['smk'], obj['evd'], obj['s100'], obj['cigdayf'], obj['cigdayd'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "smk",
                "displayName": "",
                "extensions": {
                  "question":
                    "At the present time, do you smoke cigarettes daily, occasionally, or not at all?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "smk1", "displayValue": "Daily" },
                  { "value": "smk2", "displayValue": "Occasionally" },
                  { "value": "smk3", "displayValue": "Not at all" }
                ]
              },
              {
                "fieldType": 0,
                "name": "evd",
                "displayName": "",
                "extensions": {}
              },
              {
                "name": "s100",
                "displayName": "",
                "extensions": {
                  "question":
                    "In your lifetime, have you smoked a total of 100 or more cigarettes (about 4 packs)?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "s1001", "displayValue": "Yes" },
                  { "value": "s1002", "displayValue": "No" }
                ]
              },
              {
                "name": "cigdayf",
                "displayName": "",
                "extensions": {
                  "question":
                    "How many cigarettes did you usually smoke each day?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 1,
                "maxValue": 99
              },
              {
                "name": "cigdayd",
                "displayName": "",
                "extensions": {
                  "question": "How many cigarettes do you smoke each day now?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "QSLightCont_df",
            "opType": "continuous",
            "equation":
              "derived = func['ifelse'](func['not'](func['is.na'](obj['TypeOfSmoker'])), userFunctions['QSLightCont_df1.fun'](obj['TypeOfSmoker'], obj['QuitTime'], 15, userFunctions, func), func['ifelse'](func['not'](func['is.na'](obj['SmokeDaily'])), userFunctions['QSLightCont_df2.fun'](obj['SmokeDaily'], obj['DailyCig'], obj['Age_cont'], obj['AgeDailyQuit'], 15, userFunctions, func), null));",
            "derivedFrom": [
              "TypeOfSmoker",
              "QuitTime",
              {
                "fieldType": 0,
                "name": "SmokeDaily",
                "displayName": "",
                "extensions": {}
              },
              {
                "fieldType": 0,
                "name": "DailyCig",
                "displayName": "",
                "extensions": {}
              },
              "Age_cont",
              {
                "fieldType": 0,
                "name": "AgeDailyQuit",
                "displayName": "",
                "extensions": {}
              }
            ],
            "displayName": "Light smoker",
            "extensions": {
              "units": "NA",
              "description":
                "Time-varying function for current light and former light smoker"
            },
            "minValue": 0,
            "maxValue": 1
          },
          {
            "fieldType": 1,
            "name": "QSHeavyCont_df",
            "opType": "continuous",
            "equation":
              "derived = func['ifelse'](func['not'](func['is.na'](obj['TypeOfSmoker'])), userFunctions['QSHeavyCont_df1.fun'](obj['TypeOfSmoker'], obj['QuitTime'], 15, userFunctions, func), func['ifelse'](func['not'](func['is.na'](obj['SmokeDaily'])), userFunctions['QSHeavyCont_df2.fun'](obj['SmokeDaily'], obj['DailyCig'], obj['Age_cont'], obj['AgeDailyQuit'], 15, userFunctions, func), null));",
            "derivedFrom": [
              "TypeOfSmoker",
              "QuitTime",
              {
                "fieldType": 0,
                "name": "SmokeDaily",
                "displayName": "",
                "extensions": {}
              },
              {
                "fieldType": 0,
                "name": "DailyCig",
                "displayName": "",
                "extensions": {}
              },
              "Age_cont",
              {
                "fieldType": 0,
                "name": "AgeDailyQuit",
                "displayName": "",
                "extensions": {}
              }
            ],
            "displayName": "Heavy smoker",
            "extensions": {
              "units": "NA",
              "description":
                "Time-varying function for current heavy and former heavy smoker"
            },
            "minValue": 0,
            "maxValue": 1
          },
          {
            "fieldType": 1,
            "name": "dfruit",
            "opType": 1,
            "equation":
              "derived = userFunctions['dfruit.fun'](obj['frt'], obj['frtu'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "frt",
                "displayName": "",
                "extensions": {
                  "question":
                    "Not counting juice, how often do you usually eat fruit?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              },
              {
                "name": "frtu",
                "displayName": "",
                "extensions": {
                  "question": "Is that {0} times per day, week, month or year?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "frtd", "displayValue": "Day" },
                  { "value": "frtw", "displayValue": "Week" },
                  { "value": "frtm", "displayValue": "Month" }
                ]
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "dsalad",
            "opType": 1,
            "equation":
              "derived = userFunctions['dsalad.fun'](obj['sal'], obj['salu'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "sal",
                "displayName": "",
                "extensions": {
                  "question": "How often do you (usually) eat green salad?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              },
              {
                "name": "salu",
                "displayName": "",
                "extensions": {
                  "question": "Is that {0} times a day, week, month or year?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "sald", "displayValue": "Day" },
                  { "value": "salw", "displayValue": "Week" },
                  { "value": "salm", "displayValue": "Month" },
                  { "value": "saly", "displayValue": "Year" }
                ]
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "dpotato",
            "opType": 1,
            "equation":
              "derived = userFunctions['dpotato.fun'](obj['pot'], obj['potu'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "pot",
                "displayName": "",
                "extensions": {
                  "question":
                    "How often do you usually eat potatoes, not including french fries, fried potatoes or potato chips?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              },
              {
                "name": "potu",
                "displayName": "",
                "extensions": {
                  "question": "Is that {0} times per day, week, month or year?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "potd", "displayValue": "Day" },
                  { "value": "potw", "displayValue": "Week" },
                  { "value": "potm", "displayValue": "Month" },
                  { "value": "poty", "displayValue": "Year" }
                ]
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "dcarrot",
            "opType": 1,
            "equation":
              "derived = userFunctions['dcarrot.fun'](obj['car'], obj['caru'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "car",
                "displayName": "",
                "extensions": {
                  "question": "How often do you (usually) eat carrots?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              },
              {
                "name": "caru",
                "displayName": "",
                "extensions": {
                  "question": "Is that {0} times per day, week, month or year?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "card", "displayValue": "Day" },
                  { "value": "carw", "displayValue": "Week" },
                  { "value": "carm", "displayValue": "Month" },
                  { "value": "cary", "displayValue": "Year" }
                ]
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "dveg",
            "opType": 1,
            "equation":
              "derived = userFunctions['dveg.fun'](obj['veg'], obj['vegu'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "veg",
                "displayName": "",
                "extensions": {
                  "question":
                    "Not counting carrots, potatoes or salad, how many servings of other vegetables do you usually eat?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              },
              {
                "name": "vegu",
                "displayName": "",
                "extensions": {
                  "question": "Is that {0} times per day, week, month or year?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "vegd", "displayValue": "Day" },
                  { "value": "vegw", "displayValue": "Week" },
                  { "value": "vegm", "displayValue": "Month" },
                  { "value": "vegy", "displayValue": "Year" }
                ]
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "djuice",
            "opType": 1,
            "equation":
              "derived = userFunctions['djuice.fun'](obj['jui'], obj['juiu'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "jui",
                "displayName": "",
                "extensions": {
                  "question":
                    "How often do you usually drink fruit juices such as orange, grapefruit or tomato?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              },
              {
                "name": "juiu",
                "displayName": "",
                "extensions": {
                  "question": "Is that {0} times per day, week, month or year?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "juid", "displayValue": "Day" },
                  { "value": "juiw", "displayValue": "Week" },
                  { "value": "juim", "displayValue": "Month" },
                  { "value": "juiy", "displayValue": "Year" }
                ]
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "FruitVeg",
            "opType": 1,
            "equation":
              "derived = userFunctions['FruitVeg.fun'](obj['dfruit'], obj['dsalad'], obj['dpotato'], obj['dcarrot'], obj['dveg'], userFunctions, func);",
            "derivedFrom": ["dfruit", "dsalad", "dpotato", "dcarrot", "dveg"],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "FruitVeg8Max",
            "opType": 1,
            "equation":
              "derived = userFunctions['FruitVeg8Max.fun'](obj['FruitVeg'], userFunctions, func);",
            "derivedFrom": ["FruitVeg"],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "HighPotatoFlag",
            "opType": 1,
            "equation":
              "derived = userFunctions['HighPotatoFlag.fun'](obj['dpotato'], userFunctions, func);",
            "derivedFrom": ["dpotato"],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "NoCarrotFlag",
            "opType": 1,
            "equation":
              "derived = userFunctions['NoCarrotFlag.fun'](obj['dcarrot'], userFunctions, func);",
            "derivedFrom": ["dcarrot"],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "HighJuice",
            "opType": 1,
            "equation":
              "derived = userFunctions['HighJuice.fun'](obj['djuice'], userFunctions, func);",
            "derivedFrom": ["djuice"],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "DietScore",
            "opType": "continuous",
            "equation":
              "derived = userFunctions['DietScore.fun'](obj['FruitVeg8Max'], obj['HighPotatoFlag'], obj['NoCarrotFlag'], obj['HighJuice'], userFunctions, func);",
            "derivedFrom": [
              "FruitVeg8Max",
              "HighPotatoFlag",
              "NoCarrotFlag",
              "HighJuice"
            ],
            "displayName": "Diet",
            "extensions": {
              "recommended": "true",
              "units": "NA",
              "description": "Diet score"
            },
            "minValue": 0,
            "maxValue": 10
          },
          {
            "fieldType": 1,
            "name": "DietScore_cont",
            "opType": "continuous",
            "equation":
              "derived = userFunctions['DietScore_cont.fun'](obj['DietScore'], userFunctions, func);",
            "derivedFrom": ["DietScore"],
            "displayName": "Diet",
            "extensions": { "units": "NA", "description": "Final diet score" },
            "minValue": 0,
            "maxValue": 10
          },
          {
            "fieldType": 1,
            "name": "walk",
            "opType": 1,
            "equation":
              "derived = userFunctions['Activity.fun'](obj['lpa_lpa1'], obj['lpam_lpa1'], obj['lpat_lpa1'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "lpa_lpa1",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you done any of the following in the past 3 months? (Walking for exercise)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "Yes", "displayValue": "Yes" },
                  { "value": "No", "displayValue": "No" }
                ]
              },
              {
                "name": "lpam_lpa1",
                "displayName": "",
                "extensions": {
                  "question":
                    "How much time did you spend on each ocassion? (Walking for exercise)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "lpa15", "displayValue": "1 to 15 min" },
                  { "value": "lpa30", "displayValue": "16 to 30 min" },
                  { "value": "lpa60", "displayValue": "31 to 60 min" },
                  { "value": "lpa61", "displayValue": "More than 60 min" }
                ]
              },
              {
                "name": "lpat_lpa1",
                "displayName": "",
                "extensions": {
                  "question":
                    "In the past 3 months, how many times did you participate in each activity? (Walking for exercise)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "garden",
            "opType": 1,
            "equation":
              "derived = userFunctions['Activity.fun'](obj['lpa_lpa2'], obj['lpam_lpa2'], obj['lpat_lpa2'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "lpa_lpa2",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you done any of the following in the past 3 months? (Gardening or yard work)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "Yes", "displayValue": "Yes" },
                  { "value": "No", "displayValue": "No" }
                ]
              },
              {
                "name": "lpam_lpa2",
                "displayName": "",
                "extensions": {
                  "question":
                    "How much time did you spend on each ocassion? (Gardening or yard work)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "lpa15", "displayValue": "1 to 15 min" },
                  { "value": "lpa30", "displayValue": "16 to 30 min" },
                  { "value": "lpa60", "displayValue": "31 to 60 min" },
                  { "value": "lpa61", "displayValue": "More than 60 min" }
                ]
              },
              {
                "name": "lpat_lpa2",
                "displayName": "",
                "extensions": {
                  "question":
                    "In the past 3 months, how many times did you participate in each activity? (Gardening or yard work)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "swim",
            "opType": 1,
            "equation":
              "derived = userFunctions['Activity.fun'](obj['lpa_lpa3'], obj['lpam_lpa3'], obj['lpat_lpa3'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "lpa_lpa3",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you done any of the following in the past 3 months? (Swimming)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "Yes", "displayValue": "Yes" },
                  { "value": "No", "displayValue": "No" }
                ]
              },
              {
                "name": "lpam_lpa3",
                "displayName": "",
                "extensions": {
                  "question":
                    "How much time did you spend on each ocassion? (Swimming)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "lpa15", "displayValue": "1 to 15 min" },
                  { "value": "lpa30", "displayValue": "16 to 30 min" },
                  { "value": "lpa60", "displayValue": "31 to 60 min" },
                  { "value": "lpa61", "displayValue": "More than 60 min" }
                ]
              },
              {
                "name": "lpat_lpa3",
                "displayName": "",
                "extensions": {
                  "question":
                    "In the past 3 months, how many times did you participate in each activity? (Swimming)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "bike",
            "opType": 1,
            "equation":
              "derived = userFunctions['Activity.fun'](obj['lpa_lpa4'], obj['lpam_lpa4'], obj['lpat_lpa4'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "lpa_lpa4",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you done any of the following in the past 3 months? (Bicycling)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "Yes", "displayValue": "Yes" },
                  { "value": "No", "displayValue": "No" }
                ]
              },
              {
                "name": "lpam_lpa4",
                "displayName": "",
                "extensions": {
                  "question":
                    "How much time did you spend on each ocassion? (Bicycling)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "lpa15", "displayValue": "1 to 15 min" },
                  { "value": "lpa30", "displayValue": "16 to 30 min" },
                  { "value": "lpa60", "displayValue": "31 to 60 min" },
                  { "value": "lpa61", "displayValue": "More than 60 min" }
                ]
              },
              {
                "name": "lpat_lpa4",
                "displayName": "",
                "extensions": {
                  "question":
                    "In the past 3 months, how many times did you participate in each activity? (Bicycling)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "dance",
            "opType": 1,
            "equation":
              "derived = userFunctions['Activity.fun'](obj['lpa_lpa5'], obj['lpam_lpa5'], obj['lpat_lpa5'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "lpa_lpa5",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you done any of the following in the past 3 months? (Popular or social dance)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "Yes", "displayValue": "Yes" },
                  { "value": "No", "displayValue": "No" }
                ]
              },
              {
                "name": "lpam_lpa5",
                "displayName": "",
                "extensions": {
                  "question":
                    "How much time did you spend on each ocassion? (Popular or social dance)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "lpa15", "displayValue": "1 to 15 min" },
                  { "value": "lpa30", "displayValue": "16 to 30 min" },
                  { "value": "lpa60", "displayValue": "31 to 60 min" },
                  { "value": "lpa61", "displayValue": "More than 60 min" }
                ]
              },
              {
                "name": "lpat_lpa5",
                "displayName": "",
                "extensions": {
                  "question":
                    "In the past 3 months, how many times did you participate in each activity? (Popular or social dance)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "hexercises",
            "opType": 1,
            "equation":
              "derived = userFunctions['Activity.fun'](obj['lpa_lpa6'], obj['lpam_lpa6'], obj['lpat_lpa6'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "lpa_lpa6",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you done any of the following in the past 3 months? (Home exercises)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "Yes", "displayValue": "Yes" },
                  { "value": "No", "displayValue": "No" }
                ]
              },
              {
                "name": "lpam_lpa6",
                "displayName": "",
                "extensions": {
                  "question":
                    "How much time did you spend on each ocassion? (Home exercises)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "lpa15", "displayValue": "1 to 15 min" },
                  { "value": "lpa30", "displayValue": "16 to 30 min" },
                  { "value": "lpa60", "displayValue": "31 to 60 min" },
                  { "value": "lpa61", "displayValue": "More than 60 min" }
                ]
              },
              {
                "name": "lpat_lpa6",
                "displayName": "",
                "extensions": {
                  "question":
                    "In the past 3 months, how many times did you participate in each activity? (Home exercises)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "hockey",
            "opType": 1,
            "equation":
              "derived = userFunctions['Activity.fun'](obj['lpa_lpa7'], obj['lpam_lpa7'], obj['lpat_lpa7'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "lpa_lpa7",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you done any of the following in the past 3 months? (Ice hockey)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "Yes", "displayValue": "Yes" },
                  { "value": "No", "displayValue": "No" }
                ]
              },
              {
                "name": "lpam_lpa7",
                "displayName": "",
                "extensions": {
                  "question":
                    "How much time did you spend on each ocassion? (Ice hockey)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "lpa15", "displayValue": "1 to 15 min" },
                  { "value": "lpa30", "displayValue": "16 to 30 min" },
                  { "value": "lpa60", "displayValue": "31 to 60 min" },
                  { "value": "lpa61", "displayValue": "More than 60 min" }
                ]
              },
              {
                "name": "lpat_lpa7",
                "displayName": "",
                "extensions": {
                  "question":
                    "In the past 3 months, how many times did you participate in each activity? (Ice hockey)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "skate",
            "opType": 1,
            "equation":
              "derived = userFunctions['Activity.fun'](obj['lpa_lpa8'], obj['lpam_lpa8'], obj['lpat_lpa8'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "lpa_lpa8",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you done any of the following in the past 3 months? (Ice skating)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "Yes", "displayValue": "Yes" },
                  { "value": "No", "displayValue": "No" }
                ]
              },
              {
                "name": "lpam_lpa8",
                "displayName": "",
                "extensions": {
                  "question":
                    "How much time did you spend on each ocassion? (Ice skating)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "lpa15", "displayValue": "1 to 15 min" },
                  { "value": "lpa30", "displayValue": "16 to 30 min" },
                  { "value": "lpa60", "displayValue": "31 to 60 min" },
                  { "value": "lpa61", "displayValue": "More than 60 min" }
                ]
              },
              {
                "name": "lpat_lpa8",
                "displayName": "",
                "extensions": {
                  "question":
                    "In the past 3 months, how many times did you participate in each activity? (Ice skating)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "inline",
            "opType": 1,
            "equation":
              "derived = userFunctions['Activity.fun'](obj['lpa_lpa9'], obj['lpam_lpa9'], obj['lpat_lpa9'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "lpa_lpa9",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you done any of the following in the past 3 months? (In-line skating or rollerblading)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "Yes", "displayValue": "Yes" },
                  { "value": "No", "displayValue": "No" }
                ]
              },
              {
                "name": "lpam_lpa9",
                "displayName": "",
                "extensions": {
                  "question":
                    "How much time did you spend on each ocassion? (In-line skating or rollerblading)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "lpa15", "displayValue": "1 to 15 min" },
                  { "value": "lpa30", "displayValue": "16 to 30 min" },
                  { "value": "lpa60", "displayValue": "31 to 60 min" },
                  { "value": "lpa61", "displayValue": "More than 60 min" }
                ]
              },
              {
                "name": "lpat_lpa9",
                "displayName": "",
                "extensions": {
                  "question":
                    "In the past 3 months, how many times did you participate in each activity? (In-line skating or rollerblading)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "jogrun",
            "opType": 1,
            "equation":
              "derived = userFunctions['Activity.fun'](obj['lpa_lpa10'], obj['lpam_lpa10'], obj['lpat_lpa10'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "lpa_lpa10",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you done any of the following in the past 3 months? (Jogging or running)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "Yes", "displayValue": "Yes" },
                  { "value": "No", "displayValue": "No" }
                ]
              },
              {
                "name": "lpam_lpa10",
                "displayName": "",
                "extensions": {
                  "question":
                    "How much time did you spend on each ocassion? (Jogging or running)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "lpa15", "displayValue": "1 to 15 min" },
                  { "value": "lpa30", "displayValue": "16 to 30 min" },
                  { "value": "lpa60", "displayValue": "31 to 60 min" },
                  { "value": "lpa61", "displayValue": "More than 60 min" }
                ]
              },
              {
                "name": "lpat_lpa10",
                "displayName": "",
                "extensions": {
                  "question":
                    "In the past 3 months, how many times did you participate in each activity? (Jogging or running)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "golf",
            "opType": 1,
            "equation":
              "derived = userFunctions['Activity.fun'](obj['lpa_lpa11'], obj['lpam_lpa11'], obj['lpat_lpa11'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "lpa_lpa11",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you done any of the following in the past 3 months? (Golfing)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "Yes", "displayValue": "Yes" },
                  { "value": "No", "displayValue": "No" }
                ]
              },
              {
                "name": "lpam_lpa11",
                "displayName": "",
                "extensions": {
                  "question":
                    "How much time did you spend on each ocassion? (Golfing)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "lpa15", "displayValue": "1 to 15 min" },
                  { "value": "lpa30", "displayValue": "16 to 30 min" },
                  { "value": "lpa60", "displayValue": "31 to 60 min" },
                  { "value": "lpa61", "displayValue": "More than 60 min" }
                ]
              },
              {
                "name": "lpat_lpa11",
                "displayName": "",
                "extensions": {
                  "question":
                    "In the past 3 months, how many times did you participate in each activity? (Golfing)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "aerobics",
            "opType": 1,
            "equation":
              "derived = userFunctions['Activity.fun'](obj['lpa_lpa12'], obj['lpam_lpa12'], obj['lpat_lpa12'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "lpa_lpa12",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you done any of the following in the past 3 months? (Exercise class or aerobics)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "Yes", "displayValue": "Yes" },
                  { "value": "No", "displayValue": "No" }
                ]
              },
              {
                "name": "lpam_lpa12",
                "displayName": "",
                "extensions": {
                  "question":
                    "How much time did you spend on each ocassion? (Exercise class or aerobics)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "lpa15", "displayValue": "1 to 15 min" },
                  { "value": "lpa30", "displayValue": "16 to 30 min" },
                  { "value": "lpa60", "displayValue": "31 to 60 min" },
                  { "value": "lpa61", "displayValue": "More than 60 min" }
                ]
              },
              {
                "name": "lpat_lpa12",
                "displayName": "",
                "extensions": {
                  "question":
                    "In the past 3 months, how many times did you participate in each activity? (Exercise class or aerobics)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "ski",
            "opType": 1,
            "equation":
              "derived = userFunctions['Activity.fun'](obj['lpa_lpa13'], obj['lpam_lpa13'], obj['lpat_lpa13'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "lpa_lpa13",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you done any of the following in the past 3 months? (Downhill skiing or snowboarding)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "Yes", "displayValue": "Yes" },
                  { "value": "No", "displayValue": "No" }
                ]
              },
              {
                "name": "lpam_lpa13",
                "displayName": "",
                "extensions": {
                  "question":
                    "How much time did you spend on each ocassion? (Downhill skiing or snowboarding)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "lpa15", "displayValue": "1 to 15 min" },
                  { "value": "lpa30", "displayValue": "16 to 30 min" },
                  { "value": "lpa60", "displayValue": "31 to 60 min" },
                  { "value": "lpa61", "displayValue": "More than 60 min" }
                ]
              },
              {
                "name": "lpat_lpa13",
                "displayName": "",
                "extensions": {
                  "question":
                    "In the past 3 months, how many times did you participate in each activity? (Downhill skiing or snowboarding)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "bowl",
            "opType": 1,
            "equation":
              "derived = userFunctions['Activity.fun'](obj['lpa_lpa14'], obj['lpam_lpa14'], obj['lpat_lpa14'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "lpa_lpa14",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you done any of the following in the past 3 months? (Bowling)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "Yes", "displayValue": "Yes" },
                  { "value": "No", "displayValue": "No" }
                ]
              },
              {
                "name": "lpam_lpa14",
                "displayName": "",
                "extensions": {
                  "question":
                    "How much time did you spend on each ocassion? (Bowling)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "lpa15", "displayValue": "1 to 15 min" },
                  { "value": "lpa30", "displayValue": "16 to 30 min" },
                  { "value": "lpa60", "displayValue": "31 to 60 min" },
                  { "value": "lpa61", "displayValue": "More than 60 min" }
                ]
              },
              {
                "name": "lpat_lpa14",
                "displayName": "",
                "extensions": {
                  "question":
                    "In the past 3 months, how many times did you participate in each activity? (Bowling)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "baseball",
            "opType": 1,
            "equation":
              "derived = userFunctions['Activity.fun'](obj['lpa_lpa15'], obj['lpam_lpa15'], obj['lpat_lpa15'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "lpa_lpa15",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you done any of the following in the past 3 months? (Baseball or softball)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "Yes", "displayValue": "Yes" },
                  { "value": "No", "displayValue": "No" }
                ]
              },
              {
                "name": "lpam_lpa15",
                "displayName": "",
                "extensions": {
                  "question":
                    "How much time did you spend on each ocassion? (Baseball or softball)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "lpa15", "displayValue": "1 to 15 min" },
                  { "value": "lpa30", "displayValue": "16 to 30 min" },
                  { "value": "lpa60", "displayValue": "31 to 60 min" },
                  { "value": "lpa61", "displayValue": "More than 60 min" }
                ]
              },
              {
                "name": "lpat_lpa15",
                "displayName": "",
                "extensions": {
                  "question":
                    "In the past 3 months, how many times did you participate in each activity? (Baseball or softball)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "tennis",
            "opType": 1,
            "equation":
              "derived = userFunctions['Activity.fun'](obj['lpa_lpa16'], obj['lpam_lpa16'], obj['lpat_lpa16'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "lpa_lpa16",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you done any of the following in the past 3 months? (Tennis)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "Yes", "displayValue": "Yes" },
                  { "value": "No", "displayValue": "No" }
                ]
              },
              {
                "name": "lpam_lpa16",
                "displayName": "",
                "extensions": {
                  "question":
                    "How much time did you spend on each ocassion? (Tennis)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "lpa15", "displayValue": "1 to 15 min" },
                  { "value": "lpa30", "displayValue": "16 to 30 min" },
                  { "value": "lpa60", "displayValue": "31 to 60 min" },
                  { "value": "lpa61", "displayValue": "More than 60 min" }
                ]
              },
              {
                "name": "lpat_lpa16",
                "displayName": "",
                "extensions": {
                  "question":
                    "In the past 3 months, how many times did you participate in each activity? (Tennis)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "weights",
            "opType": 1,
            "equation":
              "derived = userFunctions['Activity.fun'](obj['lpa_lpa17'], obj['lpam_lpa17'], obj['lpat_lpa17'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "lpa_lpa17",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you done any of the following in the past 3 months? (Weight-training)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "Yes", "displayValue": "Yes" },
                  { "value": "No", "displayValue": "No" }
                ]
              },
              {
                "name": "lpam_lpa17",
                "displayName": "",
                "extensions": {
                  "question":
                    "How much time did you spend on each ocassion? (Weight-training)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "lpa15", "displayValue": "1 to 15 min" },
                  { "value": "lpa30", "displayValue": "16 to 30 min" },
                  { "value": "lpa60", "displayValue": "31 to 60 min" },
                  { "value": "lpa61", "displayValue": "More than 60 min" }
                ]
              },
              {
                "name": "lpat_lpa17",
                "displayName": "",
                "extensions": {
                  "question":
                    "In the past 3 months, how many times did you participate in each activity? (Weight-training)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "fishing",
            "opType": 1,
            "equation":
              "derived = userFunctions['Activity.fun'](obj['lpa_lpa18'], obj['lpam_lpa18'], obj['lpat_lpa18'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "lpa_lpa18",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you done any of the following in the past 3 months? (Fishing)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "Yes", "displayValue": "Yes" },
                  { "value": "No", "displayValue": "No" }
                ]
              },
              {
                "name": "lpam_lpa18",
                "displayName": "",
                "extensions": {
                  "question":
                    "How much time did you spend on each ocassion? (Fishing)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "lpa15", "displayValue": "1 to 15 min" },
                  { "value": "lpa30", "displayValue": "16 to 30 min" },
                  { "value": "lpa60", "displayValue": "31 to 60 min" },
                  { "value": "lpa61", "displayValue": "More than 60 min" }
                ]
              },
              {
                "name": "lpat_lpa18",
                "displayName": "",
                "extensions": {
                  "question":
                    "In the past 3 months, how many times did you participate in each activity? (Fishing)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "volleyball",
            "opType": 1,
            "equation":
              "derived = userFunctions['Activity.fun'](obj['lpa_lpa19'], obj['lpam_lpa19'], obj['lpat_lpa19'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "lpa_lpa19",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you done any of the following in the past 3 months? (Volleyball)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "Yes", "displayValue": "Yes" },
                  { "value": "No", "displayValue": "No" }
                ]
              },
              {
                "name": "lpam_lpa19",
                "displayName": "",
                "extensions": {
                  "question":
                    "How much time did you spend on each ocassion? (Volleyball)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "lpa15", "displayValue": "1 to 15 min" },
                  { "value": "lpa30", "displayValue": "16 to 30 min" },
                  { "value": "lpa60", "displayValue": "31 to 60 min" },
                  { "value": "lpa61", "displayValue": "More than 60 min" }
                ]
              },
              {
                "name": "lpat_lpa19",
                "displayName": "",
                "extensions": {
                  "question":
                    "In the past 3 months, how many times did you participate in each activity? (Volleyball)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "basketball",
            "opType": 1,
            "equation":
              "derived = userFunctions['Activity.fun'](obj['lpa_lpa20'], obj['lpam_lpa20'], obj['lpat_lpa20'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "lpa_lpa20",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you done any of the following in the past 3 months? (Basketball)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "Yes", "displayValue": "Yes" },
                  { "value": "No", "displayValue": "No" }
                ]
              },
              {
                "name": "lpam_lpa20",
                "displayName": "",
                "extensions": {
                  "question":
                    "How much time did you spend on each ocassion? (Basketball)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "lpa15", "displayValue": "1 to 15 min" },
                  { "value": "lpa30", "displayValue": "16 to 30 min" },
                  { "value": "lpa60", "displayValue": "31 to 60 min" },
                  { "value": "lpa61", "displayValue": "More than 60 min" }
                ]
              },
              {
                "name": "lpat_lpa20",
                "displayName": "",
                "extensions": {
                  "question":
                    "In the past 3 months, how many times did you participate in each activity? (Basketball)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "soccer",
            "opType": 1,
            "equation":
              "derived = userFunctions['Activity.fun'](obj['lpa_lpa21'], obj['lpam_lpa21'], obj['lpat_lpa21'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "lpa_lpa21",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you done any of the following in the past 3 months? (Soccer)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "Yes", "displayValue": "Yes" },
                  { "value": "No", "displayValue": "No" }
                ]
              },
              {
                "name": "lpam_lpa21",
                "displayName": "",
                "extensions": {
                  "question":
                    "How much time did you spend on each ocassion? (Soccer)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "lpa15", "displayValue": "1 to 15 min" },
                  { "value": "lpa30", "displayValue": "16 to 30 min" },
                  { "value": "lpa60", "displayValue": "31 to 60 min" },
                  { "value": "lpa61", "displayValue": "More than 60 min" }
                ]
              },
              {
                "name": "lpat_lpa21",
                "displayName": "",
                "extensions": {
                  "question":
                    "In the past 3 months, how many times did you participate in each activity? (Soccer)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "other",
            "opType": 1,
            "equation":
              "derived = userFunctions['Activity.fun'](obj['lpa_lpa22'], obj['lpam_lpa22'], obj['lpat_lpa22'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "lpa_lpa22",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you done any of the following in the past 3 months? (Other)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "Yes", "displayValue": "Yes" },
                  { "value": "No", "displayValue": "No" }
                ]
              },
              {
                "name": "lpam_lpa22",
                "displayName": "",
                "extensions": {
                  "question":
                    "How much time did you spend on each ocassion? (Other)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "lpa15", "displayValue": "1 to 15 min" },
                  { "value": "lpa30", "displayValue": "16 to 30 min" },
                  { "value": "lpa60", "displayValue": "31 to 60 min" },
                  { "value": "lpa61", "displayValue": "More than 60 min" }
                ]
              },
              {
                "name": "lpat_lpa22",
                "displayName": "",
                "extensions": {
                  "question":
                    "In the past 3 months, how many times did you participate in each activity? (Other)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "PhysicalActivity",
            "opType": "continuous",
            "equation":
              "derived = userFunctions['PhysicalActivity.fun'](obj['lpa_lpa0'], obj['walk'], obj['garden'], obj['swim'], obj['bike'], obj['dance'], obj['hexercises'], obj['hockey'], obj['skate'], obj['inline'], obj['jogrun'], obj['golf'], obj['aerobics'], obj['ski'], obj['bowl'], obj['baseball'], obj['tennis'], obj['weights'], obj['fishing'], obj['volleyball'], obj['basketball'], obj['soccer'], obj['other'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "lpa_lpa0",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you done any of the following in the past 3 months? (No physical activity)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "Yes", "displayValue": "Yes" },
                  { "value": "No", "displayValue": "No" }
                ]
              },
              "walk",
              "garden",
              "swim",
              "bike",
              "dance",
              "hexercises",
              "hockey",
              "skate",
              "inline",
              "jogrun",
              "golf",
              "aerobics",
              "ski",
              "bowl",
              "baseball",
              "tennis",
              "weights",
              "fishing",
              "volleyball",
              "basketball",
              "soccer",
              "other"
            ],
            "displayName": "Activity",
            "extensions": {
              "recommended": "true",
              "units": "METs/day",
              "description":
                "Average daily leisure time energy expenditure in METs"
            },
            "minValue": 0,
            "maxValue": 10
          },
          {
            "fieldType": 1,
            "name": "PhysicalActivityLog_cont",
            "opType": 1,
            "equation":
              "derived = userFunctions['PhysicalActivityLog_cont.fun'](obj['PhysicalActivity'], userFunctions, func);",
            "derivedFrom": ["PhysicalActivity"],
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "DepInd",
            "opType": "categorical",
            "equation":
              "derived = userFunctions['DepInd.fun'](obj['dep'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "dep",
                "displayName": "",
                "extensions": {
                  "question":
                    "What is the level of social support and wealth in your neighbourhood compared to the rest of your country?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "dep1", "displayValue": "Above average" },
                  { "value": "dep2", "displayValue": "Average" },
                  { "value": "dep3", "displayValue": "Below average" }
                ]
              }
            ],
            "displayName": "Deprivation Level",
            "extensions": {
              "recommended": "true",
              "units": "NA",
              "description": "Neighbourhood deprivation level"
            },
            "categories": [
              {
                "value": "0",
                "displayValue": "Low level of neighbourhood deprivation",
                "description":
                  "1st or 2nd quintile of neighbourhood social and material deprivation (Pampalon's deprivaiton index)"
              },
              {
                "value": "1",
                "displayValue": "Moderate level of neighbourhood deprivation",
                "description":
                  "3rd quinitle of neighbourhood social and material deprivation (Pampalon's deprivaiton index)"
              },
              {
                "value": "2",
                "displayValue": "High level of neighbourhood deprivation",
                "description":
                  "4th or 5th quintile of neighbourhood social and material deprivation (Pampalon's deprivaiton index)"
              }
            ]
          },
          {
            "fieldType": 1,
            "name": "DepIndHigh_cat",
            "opType": "categorical",
            "equation":
              "derived = userFunctions['DepIndHigh_cat.fun'](obj['DepInd'], userFunctions, func);",
            "derivedFrom": ["DepInd"],
            "displayName": "High deprivation",
            "extensions": {
              "units": "NA",
              "description":
                "High level of neighbourhood deprivation- Dummy variable"
            },
            "categories": [
              {
                "value": "1",
                "displayValue": "High neighbourhood deprivation",
                "description":
                  "4th or 5th quintile of neighbourhood social and material deprivation (Pampalon's deprivaiton index)"
              },
              { "value": "0", "displayValue": "Else", "description": "Else" }
            ]
          },
          {
            "fieldType": 1,
            "name": "DepIndMod_cat",
            "opType": "categorical",
            "equation":
              "derived = userFunctions['DepIndMod_cat.fun'](obj['DepInd'], userFunctions, func);",
            "derivedFrom": ["DepInd"],
            "displayName": "Average deprivation",
            "extensions": {
              "units": "NA",
              "description":
                "Moderate level of neightbourhood deprivation- Dummy variable"
            },
            "categories": [
              {
                "value": "1",
                "displayValue": "Moderate neighbourhood deprivation",
                "description":
                  "3rd quinitle of neighbourhood social and material deprivation (Pampalon's deprivaiton index)"
              },
              { "value": "0", "displayValue": "Else", "description": "Else" }
            ]
          },
          {
            "fieldType": 1,
            "name": "Edu2",
            "opType": 1,
            "equation":
              "derived = userFunctions['Edu2.fun'](obj['hs'], obj['ed'], obj['hdg'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "hs",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you graduated from high school (secondary school)?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "hs1", "displayValue": "Yes" },
                  { "value": "hs2", "displayValue": "No" }
                ]
              },
              {
                "name": "ed",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you received any other education that can be counted towards a degree, certificate or diploma from an educational institution?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "ed1", "displayValue": "Yes" },
                  { "value": "ed2", "displayValue": "No" }
                ]
              },
              {
                "name": "hdg",
                "displayName": "",
                "extensions": {
                  "question":
                    "What is the highest degree, certificate or diploma you have obtained?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  {
                    "value": "hdg1",
                    "displayValue":
                      "No post-secondary, degree, certificate or diploma "
                  },
                  {
                    "value": "hdg2",
                    "displayValue":
                      "Trade certificate or diploma from a vocational school or apprenticeship training "
                  },
                  {
                    "value": "hdg3",
                    "displayValue":
                      "Non-university certificate or diploma from a community college, CEGEP, school of nursing, etc. "
                  },
                  {
                    "value": "hdg4",
                    "displayValue":
                      "University certificate below bachelor’s level "
                  },
                  { "value": "hdg5", "displayValue": "Bachelor’s degree " },
                  {
                    "value": "hdg6",
                    "displayValue":
                      "University degree or certificate above bachelor’s level "
                  }
                ]
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "Edu1",
            "opType": 1,
            "equation":
              "derived = userFunctions['Edu1.fun'](obj['Edu2'], userFunctions, func);",
            "derivedFrom": ["Edu2"],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "EduHSGrad_cat",
            "opType": "categorical",
            "equation":
              "derived = userFunctions['EduHSGrad_cat.fun'](obj['Edu1'], userFunctions, func);",
            "derivedFrom": ["Edu1"],
            "displayName": "High school ",
            "extensions": {
              "units": "NA",
              "description": "High school graduate- Dummy variable"
            },
            "categories": [
              {
                "value": "1",
                "displayValue": "High school graduate",
                "description": ""
              },
              { "value": "0", "displayValue": "Else", "description": "" }
            ]
          },
          {
            "fieldType": 1,
            "name": "EduNoGrad_cat",
            "opType": "categorical",
            "equation":
              "derived = userFunctions['EduNoGrad_cat.fun'](obj['Edu1'], userFunctions, func);",
            "derivedFrom": ["Edu1"],
            "displayName": "<High school",
            "extensions": {
              "units": "NA",
              "description": "Less than high school education- Dummy variable"
            },
            "categories": [
              {
                "value": "1",
                "displayValue": "Less than high school graduation",
                "description": ""
              },
              { "value": "0", "displayValue": "Else", "description": "" }
            ]
          },
          {
            "fieldType": 1,
            "name": "ImYrAgo",
            "opType": 1,
            "equation":
              "derived = userFunctions['ImYrAgo.fun'](obj['imm'], obj['imyr'], obj['CurrentYear'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "imm",
                "displayName": "",
                "extensions": {
                  "question": "Were you born a Canadian citizen?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "imm1", "displayValue": "Yes" },
                  { "value": "imm2", "displayValue": "No" }
                ]
              },
              {
                "name": "imyr",
                "displayName": "",
                "extensions": {
                  "question":
                    "In what year did you first come to Canada to live?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": null,
                "maxValue": null
              },
              {
                "fieldType": 0,
                "name": "CurrentYear",
                "displayName": "",
                "extensions": {}
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "Immig2",
            "opType": 1,
            "equation":
              "derived = userFunctions['Immig2.fun'](obj['imm'], obj['ImYrAgo'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "imm",
                "displayName": "",
                "extensions": {
                  "question": "Were you born a Canadian citizen?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "imm1", "displayValue": "Yes" },
                  { "value": "imm2", "displayValue": "No" }
                ]
              },
              "ImYrAgo"
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "Immig1",
            "opType": 1,
            "equation":
              "derived = userFunctions['Immig1.fun'](obj['Immig2'], userFunctions, func);",
            "derivedFrom": ["Immig2"],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "Immig0to15_cat",
            "opType": "categorical",
            "equation":
              "derived = userFunctions['Immig0to15_cat.fun'](obj['Immig1'], userFunctions, func);",
            "derivedFrom": ["Immig1"],
            "displayName": "Immigrate <15y",
            "extensions": {
              "units": "NA",
              "description": "Immigrated <15 years- Dummy variable"
            },
            "categories": [
              {
                "value": "1",
                "displayValue": "Immigrated <15 years",
                "description": ""
              },
              { "value": "0", "displayValue": "Else", "description": "" }
            ]
          },
          {
            "fieldType": 1,
            "name": "Immig16to30_cat",
            "opType": "categorical",
            "equation":
              "derived = userFunctions['Immig16to30_cat.fun'](obj['Immig1'], userFunctions, func);",
            "derivedFrom": ["Immig1"],
            "displayName": "Immigrate 15-30y",
            "extensions": {
              "units": "NA",
              "description": "Immigrated 16 to 30 years- Dummy variable"
            },
            "categories": [
              {
                "value": "1",
                "displayValue": "Immigrated 16 to 30 years",
                "description": ""
              },
              { "value": "0", "displayValue": "Else", "description": "" }
            ]
          },
          {
            "fieldType": 1,
            "name": "Immig31to45_cat",
            "opType": "categorical",
            "equation":
              "derived = userFunctions['Immig31to45_cat.fun'](obj['Immig1'], userFunctions, func);",
            "derivedFrom": ["Immig1"],
            "displayName": "Immigrate 31-45y",
            "extensions": {
              "units": "NA",
              "description": "Immigrated 31 to 45 years- Dummy variable"
            },
            "categories": [
              {
                "value": "1",
                "displayValue": "Immigrated 31 to 45 years",
                "description": ""
              },
              { "value": "0", "displayValue": "Else", "description": "" }
            ]
          },
          {
            "fieldType": 1,
            "name": "BMI_cont",
            "opType": 1,
            "equation":
              "derived = userFunctions['BMI_cont.fun'](obj['weightlb'], obj['heightin_hft'], obj['heightin_hin'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "weightlb",
                "displayName": "",
                "extensions": {
                  "question": "How much do you weigh?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 40,
                "maxValue": 575
              },
              {
                "name": "heightin_hft",
                "displayName": "",
                "extensions": {
                  "question": "How tall are you? (Feet (ft))",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              },
              {
                "name": "heightin_hin",
                "displayName": "",
                "extensions": {
                  "question": "How tall are you? (Inches (in))",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "BMI_spline",
            "opType": "continuous",
            "equation":
              "derived = userFunctions['BMI_spline.fun'](obj['BMI_cont'], userFunctions, func);",
            "derivedFrom": ["BMI_cont"],
            "displayName": "BMI Spline",
            "extensions": {
              "units": "kg/m2",
              "description":
                "Body mass index spline- Units above 35, 0 if 35 or less"
            },
            "minValue": null,
            "maxValue": null
          },
          {
            "fieldType": 1,
            "name": "HeartDis_cat",
            "opType": "categorical",
            "equation":
              "derived = userFunctions['HeartDis_cat.fun'](obj['hd'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "hd",
                "displayName": "",
                "extensions": {
                  "question": "Do you have heart disease?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "hd1", "displayValue": "Yes" },
                  { "value": "hd2", "displayValue": "No" }
                ]
              }
            ],
            "displayName": "Heart disease",
            "extensions": {
              "recommended": "true",
              "units": "NA",
              "description": "Has heart disease- Dummy variable"
            },
            "categories": [
              {
                "value": "1",
                "displayValue": "Has heart disease",
                "description": ""
              },
              {
                "value": "0",
                "displayValue": "Does not have heart disease",
                "description": ""
              }
            ]
          },
          {
            "fieldType": 1,
            "name": "Stroke_cat",
            "opType": "categorical",
            "equation":
              "derived = userFunctions['Stroke_cat.fun'](obj['stk'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "stk",
                "displayName": "",
                "extensions": {
                  "question": "Do you suffer from the effects of a stroke?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "stk1", "displayValue": "Yes" },
                  { "value": "stk2", "displayValue": "No" }
                ]
              }
            ],
            "displayName": "Stroke",
            "extensions": {
              "recommended": "true",
              "units": "NA",
              "description":
                "Suffers from effects of a previous stroke- Dummy variable"
            },
            "categories": [
              {
                "value": "1",
                "displayValue": "Suffers from effects of a previous stroke",
                "description": ""
              },
              {
                "value": "0",
                "displayValue":
                  "Does not suffer from the effects of a previous stroke",
                "description": ""
              }
            ]
          },
          {
            "fieldType": 1,
            "name": "Cancer_cat",
            "opType": "categorical",
            "equation":
              "derived = userFunctions['Cancer_cat.fun'](obj['can'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "can",
                "displayName": "",
                "extensions": {
                  "question": "Do you have cancer?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "can1", "displayValue": "Yes" },
                  { "value": "can2", "displayValue": "No" }
                ]
              }
            ],
            "displayName": "Cancer",
            "extensions": {
              "recommended": "true",
              "units": "NA",
              "description": "Has cancer- Dummy variable"
            },
            "categories": [
              { "value": "1", "displayValue": "Has cancer", "description": "" },
              {
                "value": "0",
                "displayValue": "Does not have cancer",
                "description": ""
              }
            ]
          },
          {
            "fieldType": 1,
            "name": "AgeXCancer_int",
            "opType": 1,
            "equation":
              "derived = userFunctions['Interact.fun'](obj['Cancer_cat'], obj['Age_cont'], userFunctions, func);",
            "derivedFrom": ["Cancer_cat", "Age_cont"],
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "Diabetes_cat",
            "opType": "categorical",
            "equation":
              "derived = userFunctions['Diabetes_cat.fun'](obj['diab'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "diab",
                "displayName": "",
                "extensions": {
                  "question": "Do you have diabetes?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "diab1", "displayValue": "Yes" },
                  { "value": "diab2", "displayValue": "No" }
                ]
              }
            ],
            "displayName": "Diabetes",
            "extensions": {
              "recommended": "true",
              "units": "NA",
              "description": "Has diabetes- Dummy variable"
            },
            "categories": [
              {
                "value": "1",
                "displayValue": "Has diabetes",
                "description": ""
              },
              {
                "value": "0",
                "displayValue": "Does not have diabetes",
                "description": ""
              }
            ]
          },
          {
            "fieldType": 1,
            "name": "AgeXDiabetes_int",
            "opType": 1,
            "equation":
              "derived = userFunctions['Interact.fun'](obj['Diabetes_cat'], obj['Age_cont'], userFunctions, func);",
            "derivedFrom": ["Diabetes_cat", "Age_cont"],
            "extensions": {}
          }
        ],
        "userFunctions": {
          "Center.fun":
            "\n        userFunctions[\"Center.fun\"] = (function (uncentered, mean, userFunctions, func) {\n    return func['ifelse2'](func['not'](func['is.na'](uncentered)), uncentered - mean, null);\n})\n    ",
          "Interact.fun":
            "\n        userFunctions[\"Interact.fun\"] = (function (var1, var2, userFunctions, func) {\n    return func['ifelse2'](func['not'](func['is.na'](var1)) && func['not'](func['is.na'](var2)), var1 * var2, null);\n})\n    ",
          "Max.fun":
            "\n        userFunctions[\"Max.fun\"] = (function (var1, max, userFunctions, func) {\n    return func['ifelse2'](var1 > max, max, var1);\n})\n    ",
          "NA0.fun":
            "\n        userFunctions[\"NA0.fun\"] = (function (var1, userFunctions, func) {\n    return func['ifelse2'](func['is.na'](var1), 0, var1);\n})\n    ",
          "CCHS_NA1.fun":
            "\n        userFunctions[\"CCHS_NA1.fun\"] = (function (x, userFunctions, func) {\n    return func['ifelse2'](func['isIn'](x, 6, 7, 8, 9), null, x);\n})\n    ",
          "CCHS_NA2.fun":
            "\n        userFunctions[\"CCHS_NA2.fun\"] = (function (x, userFunctions, func) {\n    return func['ifelse2'](func['isIn'](x, 96, 97, 98, 99), null, x);\n})\n    ",
          "CCHS_NA3.fun":
            "\n        userFunctions[\"CCHS_NA3.fun\"] = (function (x, userFunctions, func) {\n    return func['ifelse2'](func['isIn'](x, 996, 997, 998, 999), null, x);\n})\n    ",
          "CCHS_NA4.fun":
            "\n        userFunctions[\"CCHS_NA4.fun\"] = (function (x, userFunctions, func) {\n    return func['ifelse2'](func['isIn'](x, 9996, 9997, 9998, 9999), null, x);\n})\n    ",
          "falseifNA":
            "\n        userFunctions[\"falseifNA\"] = (function (x, userFunctions, func) {\n    return func['ifelse'](func['is.na'](x), false, x);\n})\n    ",
          "ifelse2":
            "\n        userFunctions[\"ifelse2\"] = (function (x, a, b, userFunctions, func) {\n    return func['ifelse'](userFunctions['falseifNA'](x, userFunctions, func), a, b);\n})\n    ",
          "Age_spline.fun(Age_spline)":
            "\n        userFunctions[\"Age_spline.fun(Age_spline)\"] = (function (Age_cont, point, userFunctions, func) {\n    return func['ifelse2'](Age_cont <= point, 0, func['ifelse2'](Age_cont > point, Age_cont - point, null));\n})\n    ",
          "Age_spline.fun":
            "\n        userFunctions[\"Age_spline.fun\"] = (function (Age_cont, point, userFunctions, func) {\n    return userFunctions['Age_spline.fun(Age_spline)'](Age_cont, point, userFunctions, func);\n})\n    ",
          "DrinksLastWeek.fun":
            "\n        userFunctions[\"DrinksLastWeek.fun\"] = (function (drk_drkm2, drk_drkt2, drk_drkw2, drk_drkr2, drk_drkf2, drk_drksa2, drk_drksu2, dany, userFunctions, func) {\n    return func['ifelse2'](dany == 'dany2', 0, func['ifelse2'](dany == 'dany1', drk_drkm2 + drk_drkt2 + drk_drkw2 + drk_drkr2 + drk_drkf2 + drk_drksa2 + drk_drksu2, null));\n})\n    ",
          "Binge.fun":
            "\n        userFunctions[\"Binge.fun\"] = (function (db, dany, drk_drkm2, drk_drkt2, drk_drkw2, drk_drkr2, drk_drkf2, drk_drksa2, drk_drksu2, userFunctions, func) {\n    return func['ifelse2'](func['isIn'](db, 'db5', 'db6') || drk_drkm2 >= 5 || drk_drkt2 >= 5 || drk_drkw2 >= 5 || drk_drkr2 >= 5 || drk_drkf2 >= 5 || drk_drksa2 >= 5 || drk_drksu2 >= 5, 1, func['ifelse2'](func['isIn'](db, 'db1', 'db2', 'db3', 'db4') && dany == 'dany2' || func['isIn'](db, 'db1', 'db2', 'db3', 'db4') && dany == 'dany1' && (drk_drkm2 < 5 && drk_drkt2 < 5 && drk_drkw2 < 5 && drk_drkr2 < 5 && drk_drkf2 < 5 && drk_drksa2 < 5 && drk_drksu2 < 5), 0, null));\n})\n    ",
          "AlcoholType.fun":
            "\n        userFunctions[\"AlcoholType.fun\"] = (function (Binge, dany, DrinksLastWeek_cont, cut1, cut2, userFunctions, func) {\n    return func['ifelse2'](Binge == 1, 2, func['ifelse2'](dany == 'dany2' || dany == 'dany1' && DrinksLastWeek_cont <= cut1, 0, func['ifelse2'](dany == 'dany1' && DrinksLastWeek_cont > cut1 && DrinksLastWeek_cont <= cut2, 1, func['ifelse2'](dany == 'dany1' && DrinksLastWeek_cont > cut2, 2, null))));\n})\n    ",
          "AlcoholMod_cat.fun":
            "\n        userFunctions[\"AlcoholMod_cat.fun\"] = (function (AlcoholType, userFunctions, func) {\n    return func['ifelse'](AlcoholType == 1, 1, func['ifelse'](func['isIn'](AlcoholType, 0, 2), 0, null));\n})\n    ",
          "AlcoholHeavy_cat.fun":
            "\n        userFunctions[\"AlcoholHeavy_cat.fun\"] = (function (AlcoholType, userFunctions, func) {\n    return func['ifelse'](AlcoholType == 2, 1, func['ifelse'](func['isIn'](AlcoholType, 0, 1), 0, null));\n})\n    ",
          "QuitTime.fun":
            "\n        userFunctions[\"QuitTime.fun\"] = (function (stpn, stpny, userFunctions, func) {\n    return func['ifelse2'](stpn == 'stpn1', 0, func['ifelse2'](stpn == 'stpn2', 1, func['ifelse2'](stpn == 'stpn3', 2, func['ifelse2'](stpn == 'stpn4', stpny, null))));\n})\n    ",
          "TypeOfSmoker.fun":
            "\n        userFunctions[\"TypeOfSmoker.fun\"] = (function (smk, evd, s100, cigdayf, cigdayd, userFunctions, func) {\n    return func['ifelse2'](smk == 'smk3' && evd == 'evd2' && s100 == 's1002', 0, func['ifelse2'](smk == 'smk3' && evd == 'evd1' && cigdayf < 20 || smk == 'smk3' && evd == 'evd2' && s100 == 's1001', 1, func['ifelse2'](smk == 'smk3' && evd == 'evd1' && cigdayf >= 20, 2, func['ifelse2'](smk == 'smk1' && cigdayd < 20 || smk == 'smk2', 3, func['ifelse2'](smk == 'smk1' && cigdayd >= 20, 4, null)))));\n})\n    ",
          "QSLightCont_df1.fun":
            "\n        userFunctions[\"QSLightCont_df1.fun\"] = (function (TypeOfSmoker, QuitTime, sigma, userFunctions, func) {\n    return func['ifelse2'](func['isIn'](TypeOfSmoker, 0, 2, 4), 0, func['ifelse2'](TypeOfSmoker == 1, func['exp'](-QuitTime / sigma), func['ifelse2'](TypeOfSmoker == 3, 1, null)));\n})\n    ",
          "QSLightCont_df2.fun":
            "\n        userFunctions[\"QSLightCont_df2.fun\"] = (function (SmokeDaily, DailyCig, Age_cont, AgeDailyQuit, sigma, userFunctions, func) {\n    return func['ifelse2'](SmokeDaily == 0, 0, func['ifelse2'](SmokeDaily == 1 && DailyCig < 20, 1, func['ifelse2'](SmokeDaily == 2 && DailyCig < 20, func['exp'](-(Age_cont - AgeDailyQuit) / sigma), func['ifelse2'](func['isIn'](SmokeDaily, 1, 2) && DailyCig >= 20, 0, null))));\n})\n    ",
          "QSHeavyCont_df1.fun":
            "\n        userFunctions[\"QSHeavyCont_df1.fun\"] = (function (TypeOfSmoker, QuitTime, sigma, userFunctions, func) {\n    return func['ifelse2'](func['isIn'](TypeOfSmoker, 0, 1, 3), 0, func['ifelse2'](TypeOfSmoker == 2, func['exp'](-QuitTime / sigma), func['ifelse2'](TypeOfSmoker == 4, 1, null)));\n})\n    ",
          "QSHeavyCont_df2.fun":
            "\n        userFunctions[\"QSHeavyCont_df2.fun\"] = (function (SmokeDaily, DailyCig, Age_cont, AgeDailyQuit, sigma, userFunctions, func) {\n    return func['ifelse2'](SmokeDaily == 0, 0, func['ifelse2'](SmokeDaily == 1 && DailyCig >= 20, 1, func['ifelse2'](SmokeDaily == 2 && DailyCig >= 20, func['exp'](-(Age_cont - AgeDailyQuit) / sigma), func['ifelse2'](func['isIn'](SmokeDaily, 1, 2) && DailyCig < 20, 0, null))));\n})\n    ",
          "TypeOfSmoker2.fun":
            "\n        userFunctions[\"TypeOfSmoker2.fun\"] = (function (smk, evd, s100, wcig, userFunctions, func) {\n    return func['ifelse2'](wcig == 'wcig2', 6, func['ifelse2'](smk == 'smk1', 1, func['ifelse2'](smk == 'smk2' && evd == 'evd1', 2, func['ifelse2'](smk == 'smk2' && evd == 'evd2', 3, func['ifelse2'](smk == 'smk3' && evd == 'evd1', 4, func['ifelse2'](smk == 'smk3' && evd == 'evd2' && s100 == 's1001', 5, func['ifelse2'](smk == 'smk3' && evd == 'evd2' && s100 == 's1002', 6, null)))))));\n})\n    ",
          "tsq_ds.fun":
            "\n        userFunctions[\"tsq_ds.fun\"] = (function (stpo, stpoy, userFunctions, func) {\n    return func['ifelse'](stpo == 'stpo1', 0.5, func['ifelse'](stpo == 'stpo2', 1.5, func['ifelse'](stpo == 'stpo3', 2.5, func['ifelse'](stpo == 'stpo4', stpoy, null))));\n})\n    ",
          "PackYears1.fun":
            "\n        userFunctions[\"PackYears1.fun\"] = (function (TypeOfSmoker2, Age_cont, agecigd, cigdayd, tsq_ds, cigdayf, cigdayo, dayocc, agec1, s100, userFunctions, func) {\n    return func['ifelse2'](TypeOfSmoker2 == 1, func['pmax']((Age_cont - agecigd) * (cigdayd / 20), 0.0137), func['ifelse2'](TypeOfSmoker2 == 2, func['pmax']((Age_cont - agecigd - tsq_ds) * (cigdayf / 20), 0.0137) + func['pmax'](cigdayo * dayocc / 30, 1) * tsq_ds, func['ifelse2'](TypeOfSmoker2 == 3, func['pmax'](cigdayo * dayocc / 30, 1) / 20 * (Age_cont - agec1), func['ifelse2'](TypeOfSmoker2 == 4, func['pmax']((Age_cont - agecigd - tsq_ds) * (cigdayf / 20), 0.0137), func['ifelse2'](TypeOfSmoker2 == 5 && s100 == 's1001', 0.0137, func['ifelse2'](TypeOfSmoker2 == 5 && s100 == 's1002', 0.007, func['ifelse2'](TypeOfSmoker2 == 6, 0, null)))))));\n})\n    ",
          "PackYears2.fun":
            "\n        userFunctions[\"PackYears2.fun\"] = (function (SmokeDaily, Age_cont, AgeDailyStart, DailyCig, AgeDailyQuit, userFunctions, func) {\n    return func['ifelse2'](SmokeDaily == 0, 0, func['ifelse2'](SmokeDaily == 1, (Age_cont - AgeDailyStart) * (DailyCig / 20), func['ifelse2'](SmokeDaily == 2, (AgeDailyQuit - AgeDailyStart) * (DailyCig / 20), null)));\n})\n    ",
          "smoker.fun(smoker)":
            "\n        userFunctions[\"smoker.fun(smoker)\"] = (function (TypeOfSmoker2, userFunctions, func) {\n    return func['ifelse'](func['isIn'](TypeOfSmoker2, 1, 2, 3), 1, func['ifelse'](func['isIn'](TypeOfSmoker2, 4, 5, 6), 0, null));\n})\n    ",
          "smoker.fun":
            "\n        userFunctions[\"smoker.fun\"] = (function (TypeOfSmoker2, userFunctions, func) {\n    return userFunctions['smoker.fun(smoker)'](TypeOfSmoker2, userFunctions, func);\n})\n    ",
          "eversmoker.fun(eversmoker)":
            "\n        userFunctions[\"eversmoker.fun(eversmoker)\"] = (function (TypeOfSmoker2, userFunctions, func) {\n    return func['ifelse'](func['isIn'](TypeOfSmoker2, 1, 2, 3, 4, 5), 1, func['ifelse'](TypeOfSmoker2 == 6, 0, null));\n})\n    ",
          "eversmoker.fun":
            "\n        userFunctions[\"eversmoker.fun\"] = (function (TypeOfSmoker2, userFunctions, func) {\n    return userFunctions['eversmoker.fun(eversmoker)'](TypeOfSmoker2, userFunctions, func);\n})\n    ",
          "SmokeSimple1.fun(SmokeSimple)":
            "\n        userFunctions[\"SmokeSimple1.fun(SmokeSimple)\"] = (function (smoker, eversmoker, tsq_ds, TypeOfSmoker2, userFunctions, func) {\n    return func['ifelse2'](smoker == 0 && eversmoker == 0, 0, func['ifelse2'](smoker == 1 && eversmoker == 1, 1, func['ifelse2'](smoker == 0 && eversmoker == 1 && tsq_ds < 5 || TypeOfSmoker2 == 5, 2, func['ifelse2'](smoker == 0 && eversmoker == 1 && tsq_ds >= 5, 3, null))));\n})\n    ",
          "SmokeSimple1.fun":
            "\n        userFunctions[\"SmokeSimple1.fun\"] = (function (smoker, eversmoker, tsq_ds, TypeOfSmoker2, userFunctions, func) {\n    return userFunctions['SmokeSimple1.fun(SmokeSimple)'](smoker, eversmoker, tsq_ds, TypeOfSmoker2, userFunctions, func);\n})\n    ",
          "SmokeSimple2.fun(SmokeSimple)":
            "\n        userFunctions[\"SmokeSimple2.fun(SmokeSimple)\"] = (function (SmokeDaily, Age_cont, AgeDailyQuit, userFunctions, func) {\n    return func['ifelse2'](SmokeDaily == 0, 0, func['ifelse2'](SmokeDaily == 1, 1, func['ifelse2'](SmokeDaily == 2 && Age_cont < AgeDailyQuit + 5, 2, func['ifelse2'](SmokeDaily == 2 && Age_cont > AgeDailyQuit + 5, 3, null))));\n})\n    ",
          "SmokeSimple2.fun":
            "\n        userFunctions[\"SmokeSimple2.fun\"] = (function (SmokeDaily, Age_cont, AgeDailyQuit, userFunctions, func) {\n    return userFunctions['SmokeSimple2.fun(SmokeSimple)'](SmokeDaily, Age_cont, AgeDailyQuit, userFunctions, func);\n})\n    ",
          "dfruit.fun":
            "\n        userFunctions[\"dfruit.fun\"] = (function (frt, frtu, userFunctions, func) {\n    return func['ifelse'](func['is.na'](frt), null, func['ifelse'](frtu == 'frtd', frt, func['ifelse'](frtu == 'frtw', frt / 7, func['ifelse'](frtu == 'frtm', frt / 30, func['ifelse'](frtu == 'frty', frt / 365, null)))));\n})\n    ",
          "dsalad.fun":
            "\n        userFunctions[\"dsalad.fun\"] = (function (sal, salu, userFunctions, func) {\n    return func['ifelse'](func['is.na'](sal), null, func['ifelse'](salu == 'sald', sal, func['ifelse'](salu == 'salw', sal / 7, func['ifelse'](salu == 'salm', sal / 30, func['ifelse'](salu == 'saly', sal / 365, null)))));\n})\n    ",
          "dpotato.fun":
            "\n        userFunctions[\"dpotato.fun\"] = (function (pot, potu, userFunctions, func) {\n    return func['ifelse'](func['is.na'](pot), null, func['ifelse'](potu == 'potd', pot, func['ifelse'](potu == 'potw', pot / 7, func['ifelse'](potu == 'potm', pot / 30, func['ifelse'](potu == 'poty', pot / 365, null)))));\n})\n    ",
          "dcarrot.fun":
            "\n        userFunctions[\"dcarrot.fun\"] = (function (car, caru, userFunctions, func) {\n    return func['ifelse'](func['is.na'](car), null, func['ifelse'](caru == 'card', car, func['ifelse'](caru == 'carw', car / 7, func['ifelse'](caru == 'carm', car / 30, func['ifelse'](caru == 'cary', car / 365, null)))));\n})\n    ",
          "dveg.fun":
            "\n        userFunctions[\"dveg.fun\"] = (function (veg, vegu, userFunctions, func) {\n    return func['ifelse'](func['is.na'](veg), null, func['ifelse'](vegu == 'vegd', veg, func['ifelse'](vegu == 'vegw', veg / 7, func['ifelse'](vegu == 'vegm', veg / 30, func['ifelse'](vegu == 'vegy', veg / 365, null)))));\n})\n    ",
          "djuice.fun":
            "\n        userFunctions[\"djuice.fun\"] = (function (jui, juiu, userFunctions, func) {\n    return func['ifelse'](func['is.na'](jui), null, func['ifelse'](juiu == 'juid', jui, func['ifelse'](juiu == 'juiw', jui / 7, func['ifelse'](juiu == 'juim', jui / 30, func['ifelse'](juiu == 'juiy', jui / 365, null)))));\n})\n    ",
          "FruitVeg.fun":
            "\n        userFunctions[\"FruitVeg.fun\"] = (function (dfruit, dsalad, dpotato, dcarrot, dveg, userFunctions, func) {\n    return func['ifelse2'](func['not'](func['is.na'](dfruit)) && func['not'](func['is.na'](dsalad)) && func['not'](func['is.na'](dpotato)) && func['not'](func['is.na'](dcarrot)) && func['not'](func['is.na'](dveg)), dfruit + dsalad + dpotato + dcarrot + dveg, null);\n})\n    ",
          "FruitVeg8Max.fun":
            "\n        userFunctions[\"FruitVeg8Max.fun\"] = (function (FruitVeg, userFunctions, func) {\n    return func['ifelse2'](FruitVeg > 8, 8, func['ifelse2'](func['not'](func['is.na'](FruitVeg)), FruitVeg, null));\n})\n    ",
          "HighPotatoFlag.fun":
            "\n        userFunctions[\"HighPotatoFlag.fun\"] = (function (dpotato, userFunctions, func) {\n    return func['ifelse2'](dpotato >= 1, 1, func['ifelse2'](func['not'](func['is.na'](dpotato)), 0, null));\n})\n    ",
          "NoCarrotFlag.fun":
            "\n        userFunctions[\"NoCarrotFlag.fun\"] = (function (dcarrot, userFunctions, func) {\n    return func['ifelse2'](dcarrot == 0, 1, func['ifelse2'](func['not'](func['is.na'](dcarrot)), 0, null));\n})\n    ",
          "HighJuice.fun":
            "\n        userFunctions[\"HighJuice.fun\"] = (function (djuice, userFunctions, func) {\n    return func['ifelse2'](djuice <= 0, 0, func['ifelse2'](djuice == 1, 0, func['ifelse2'](func['not'](func['is.na'](djuice)), djuice - 1, null)));\n})\n    ",
          "DietScore.fun":
            "\n        userFunctions[\"DietScore.fun\"] = (function (FruitVeg8Max, HighPotatoFlag, NoCarrotFlag, HighJuice, userFunctions, func) {\n    return func['ifelse2'](func['not'](func['is.na'](FruitVeg8Max)) && func['not'](func['is.na'](HighPotatoFlag)) && func['not'](func['is.na'](NoCarrotFlag)) && func['not'](func['is.na'](HighJuice)), 2 + FruitVeg8Max - 2 * HighPotatoFlag - 2 * NoCarrotFlag - 2 * HighJuice, null);\n})\n    ",
          "DietScore_cont.fun":
            "\n        userFunctions[\"DietScore_cont.fun\"] = (function (DietScore, userFunctions, func) {\n    return func['ifelse2'](DietScore < 0, 0, func['ifelse2'](DietScore > 10, 10, func['ifelse2'](func['not'](func['is.na'](DietScore)), DietScore, null)));\n})\n    ",
          "diet_num.fun":
            "\n        userFunctions[\"diet_num.fun\"] = (function (day, week, month, year, userFunctions, func) {\n    return func['ifelse2'](func['not'](func['is.na'](day)), day, func['ifelse2'](func['not'](func['is.na'](week)), week, func['ifelse2'](func['not'](func['is.na'](month)), month, func['ifelse2'](func['not'](func['is.na'](year)), year, 0))));\n})\n    ",
          "Activity.fun":
            "\n        userFunctions[\"Activity.fun\"] = (function (lpa, lpam, lpat, userFunctions, func) {\n    return func['ifelse2'](lpa == 'Yes' && lpam == 'lpa15', lpat * 0.2167 / 3, func['ifelse2'](lpa == 'Yes' && lpam == 'lpa30', lpat * 0.3833 / 3, func['ifelse2'](lpa == 'Yes' && lpam == 'lpa60', lpat * 0.75 / 3, func['ifelse2'](lpa == 'Yes' && lpam == 'lpa61', lpat * 1 / 3, 0))));\n})\n    ",
          "PhysicalActivity.fun(noactivity)":
            "\n        userFunctions[\"PhysicalActivity.fun(noactivity)\"] = (function (lpa_lpa0, walk, garden, swim, bike, dance, hexercises, hockey, skate, inline, jogrun, golf, aerobics, ski, bowl, baseball, tennis, weights, fishing, volleyball, basketball, soccer, other, userFunctions, func) {\n    return func['ifelse2'](lpa_lpa0 == 'Yes' && walk == 0 && garden == 0 && swim == 0 && bike == 0 && dance == 0 && hexercises == 0 && hockey == 0 && skate == 0 && inline == 0 && jogrun == 0 && golf == 0 && aerobics == 0 && ski == 0 && bowl == 0 && baseball == 0 && tennis == 0 && weights == 0 && fishing == 0 && volleyball == 0 && basketball == 0 && soccer == 0 && other == 0, 1, func['ifelse2'](func['is.na'](lpa_lpa0) && walk == 0 && garden == 0 && swim == 0 && bike == 0 && dance == 0 && hexercises == 0 && hockey == 0 && skate == 0 && inline == 0 && jogrun == 0 && golf == 0 && aerobics == 0 && ski == 0 && bowl == 0 && baseball == 0 && tennis == 0 && weights == 0 && fishing == 0 && volleyball == 0 && basketball == 0 && soccer == 0 && other == 0, null, 0));\n})\n    ",
          "PhysicalActivity.fun(PhysicalActivity)":
            "\n        userFunctions[\"PhysicalActivity.fun(PhysicalActivity)\"] = (function (lpa_lpa0, walk, garden, swim, bike, dance, hexercises, hockey, skate, inline, jogrun, golf, aerobics, ski, bowl, baseball, tennis, weights, fishing, volleyball, basketball, soccer, other, userFunctions, func) {\n    return func['ifelse2'](func['is.na'](userFunctions['PhysicalActivity.fun(noactivity)'](lpa_lpa0, walk, garden, swim, bike, dance, hexercises, hockey, skate, inline, jogrun, golf, aerobics, ski, bowl, baseball, tennis, weights, fishing, volleyball, basketball, soccer, other, userFunctions, func)), null, func['ifelse2'](userFunctions['PhysicalActivity.fun(noactivity)'](lpa_lpa0, walk, garden, swim, bike, dance, hexercises, hockey, skate, inline, jogrun, golf, aerobics, ski, bowl, baseball, tennis, weights, fishing, volleyball, basketball, soccer, other, userFunctions, func) == 1, 0, func['ifelse2'](3 * walk / 30 + 3 * garden / 30 + 3 * swim / 30 + 4 * bike / 30 + 3 * dance / 30 + 3 * hexercises / 30 + 6 * hockey / 30 + 4 * skate / 30 + 5 * inline / 30 + 9.5 * jogrun / 30 + 4 * golf / 30 + 4 * aerobics / 30 + 4 * ski / 30 + 2 * bowl / 30 + 3 * baseball / 30 + 4 * tennis / 30 + 3 * weights / 30 + 3 * fishing / 30 + 5 * volleyball / 30 + 6 * basketball / 30 + 5 * soccer / 30 + 4 * other / 30 > 10, 10, 3 * walk / 30 + 3 * garden / 30 + 3 * swim / 30 + 4 * bike / 30 + 3 * dance / 30 + 3 * hexercises / 30 + 6 * hockey / 30 + 4 * skate / 30 + 5 * inline / 30 + 9.5 * jogrun / 30 + 4 * golf / 30 + 4 * aerobics / 30 + 4 * ski / 30 + 2 * bowl / 30 + 3 * baseball / 30 + 4 * tennis / 30 + 3 * weights / 30 + 3 * fishing / 30 + 5 * volleyball / 30 + 6 * basketball / 30 + 5 * soccer / 30 + 4 * other / 30)));\n})\n    ",
          "PhysicalActivity.fun":
            "\n        userFunctions[\"PhysicalActivity.fun\"] = (function (lpa_lpa0, walk, garden, swim, bike, dance, hexercises, hockey, skate, inline, jogrun, golf, aerobics, ski, bowl, baseball, tennis, weights, fishing, volleyball, basketball, soccer, other, userFunctions, func) {\n    return userFunctions['PhysicalActivity.fun(PhysicalActivity)'](lpa_lpa0, walk, garden, swim, bike, dance, hexercises, hockey, skate, inline, jogrun, golf, aerobics, ski, bowl, baseball, tennis, weights, fishing, volleyball, basketball, soccer, other, userFunctions, func);\n})\n    ",
          "PhysicalActivityLog_cont.fun(PhysicalActivity_cont)":
            "\n        userFunctions[\"PhysicalActivityLog_cont.fun(PhysicalActivity_cont)\"] = (function (PhysicalActivity, userFunctions, func) {\n    return func['ifelse2'](func['not'](func['is.na'](PhysicalActivity)), func['log'](1 + PhysicalActivity) / func['log'](10), null);\n})\n    ",
          "PhysicalActivityLog_cont.fun":
            "\n        userFunctions[\"PhysicalActivityLog_cont.fun\"] = (function (PhysicalActivity, userFunctions, func) {\n    return userFunctions['PhysicalActivityLog_cont.fun(PhysicalActivity_cont)'](PhysicalActivity, userFunctions, func);\n})\n    ",
          "DepInd.fun":
            "\n        userFunctions[\"DepInd.fun\"] = (function (dep, userFunctions, func) {\n    return func['ifelse'](dep == 'dep1', 0, func['ifelse'](dep == 'dep2', 1, func['ifelse'](dep == 'dep3', 2, null)));\n})\n    ",
          "DepIndHigh_cat.fun":
            "\n        userFunctions[\"DepIndHigh_cat.fun\"] = (function (DepInd, userFunctions, func) {\n    return func['ifelse'](DepInd == 2, 1, func['ifelse'](func['isIn'](DepInd, 0, 1), 0, null));\n})\n    ",
          "DepIndMod_cat.fun":
            "\n        userFunctions[\"DepIndMod_cat.fun\"] = (function (DepInd, userFunctions, func) {\n    return func['ifelse'](DepInd == 1, 1, func['ifelse'](func['isIn'](DepInd, 0, 2), 0, null));\n})\n    ",
          "Edu2.fun":
            "\n        userFunctions[\"Edu2.fun\"] = (function (hs, ed, hdg, userFunctions, func) {\n    return func['ifelse2'](hs == 'hs2', 0, func['ifelse2'](hs == 'hs1' && ed == 'ed2', 1, func['ifelse2'](hs == 'hs1' && ed == 'ed1' && hdg == 'hdg1', 2, func['ifelse2'](hs == 'hs1' && ed == 'ed1' && func['isIn'](hdg, 'hdg2', 'hdg3', 'hdg4', 'hdg5', 'hdg6'), 3, null))));\n})\n    ",
          "EduHSGrad2_cat.fun":
            "\n        userFunctions[\"EduHSGrad2_cat.fun\"] = (function (Edu2, userFunctions, func) {\n    return func['ifelse'](Edu2 == 1, 1, func['ifelse'](func['isIn'](Edu2, 0, 2, 3), 0, null));\n})\n    ",
          "EduSomePS2_cat.fun":
            "\n        userFunctions[\"EduSomePS2_cat.fun\"] = (function (Edu2, userFunctions, func) {\n    return func['ifelse'](Edu2 == 2, 1, func['ifelse'](func['isIn'](Edu2, 0, 1, 3), 0, null));\n})\n    ",
          "EduPSGrad2_cat.fun":
            "\n        userFunctions[\"EduPSGrad2_cat.fun\"] = (function (Edu2, userFunctions, func) {\n    return func['ifelse'](Edu2 == 3, 1, func['ifelse'](func['isIn'](Edu2, 0, 1, 2), 0, null));\n})\n    ",
          "Edu1.fun":
            "\n        userFunctions[\"Edu1.fun\"] = (function (Edu2, userFunctions, func) {\n    return func['ifelse'](Edu2 == 0, 2, func['ifelse'](Edu2 == 1, 1, func['ifelse'](func['isIn'](Edu2, 2, 3), 0, null)));\n})\n    ",
          "EduHSGrad_cat.fun":
            "\n        userFunctions[\"EduHSGrad_cat.fun\"] = (function (Edu1, userFunctions, func) {\n    return func['ifelse'](Edu1 == 1, 1, func['ifelse'](func['isIn'](Edu1, 0, 2), 0, null));\n})\n    ",
          "EduNoGrad_cat.fun":
            "\n        userFunctions[\"EduNoGrad_cat.fun\"] = (function (Edu1, userFunctions, func) {\n    return func['ifelse'](Edu1 == 2, 1, func['ifelse'](func['isIn'](Edu1, 0, 1), 0, null));\n})\n    ",
          "ImYrAgo.fun(ImYrAgo)":
            "\n        userFunctions[\"ImYrAgo.fun(ImYrAgo)\"] = (function (imm, imyr, CurrentYear, userFunctions, func) {\n    return func['ifelse2'](func['is.na'](imm) || imm == 'imm2' && func['is.na'](imyr) || imm == 'imm1', null, CurrentYear - imyr);\n})\n    ",
          "ImYrAgo.fun":
            "\n        userFunctions[\"ImYrAgo.fun\"] = (function (imm, imyr, CurrentYear, userFunctions, func) {\n    return userFunctions['ImYrAgo.fun(ImYrAgo)'](imm, imyr, CurrentYear, userFunctions, func);\n})\n    ",
          "Immig2.fun(Immig2)":
            "\n        userFunctions[\"Immig2.fun(Immig2)\"] = (function (imm, ImYrAgo, userFunctions, func) {\n    return func['ifelse2'](imm == 'imm1', 0, func['ifelse2'](imm == 'imm2' && ImYrAgo >= 0 && ImYrAgo <= 15, 1, func['ifelse2'](imm == 'imm2' && ImYrAgo > 15 && ImYrAgo <= 30, 2, func['ifelse2'](imm == 'imm2' && ImYrAgo > 30 && ImYrAgo <= 45, 3, func['ifelse2'](imm == 'imm2' && ImYrAgo > 45, 4, null)))));\n})\n    ",
          "Immig2.fun":
            "\n        userFunctions[\"Immig2.fun\"] = (function (imm, ImYrAgo, userFunctions, func) {\n    return userFunctions['Immig2.fun(Immig2)'](imm, ImYrAgo, userFunctions, func);\n})\n    ",
          "Immig1.fun(Immig1)":
            "\n        userFunctions[\"Immig1.fun(Immig1)\"] = (function (Immig2, userFunctions, func) {\n    return func['ifelse'](func['isIn'](Immig2, 0, 4), 0, func['ifelse'](Immig2 == 1, 1, func['ifelse'](Immig2 == 2, 2, func['ifelse'](Immig2 == 3, 3, null))));\n})\n    ",
          "Immig1.fun":
            "\n        userFunctions[\"Immig1.fun\"] = (function (Immig2, userFunctions, func) {\n    return userFunctions['Immig1.fun(Immig1)'](Immig2, userFunctions, func);\n})\n    ",
          "Immig0to15_cat.fun(Immig0to15_cat)":
            "\n        userFunctions[\"Immig0to15_cat.fun(Immig0to15_cat)\"] = (function (Immig1, userFunctions, func) {\n    return func['ifelse'](Immig1 == 1, 1, func['ifelse'](func['isIn'](Immig1, 0, 2, 3), 0, null));\n})\n    ",
          "Immig0to15_cat.fun":
            "\n        userFunctions[\"Immig0to15_cat.fun\"] = (function (Immig1, userFunctions, func) {\n    return userFunctions['Immig0to15_cat.fun(Immig0to15_cat)'](Immig1, userFunctions, func);\n})\n    ",
          "Immig16to30_cat.fun(Immig16to30_cat)":
            "\n        userFunctions[\"Immig16to30_cat.fun(Immig16to30_cat)\"] = (function (Immig1, userFunctions, func) {\n    return func['ifelse'](Immig1 == 2, 1, func['ifelse'](func['isIn'](Immig1, 0, 1, 3), 0, null));\n})\n    ",
          "Immig16to30_cat.fun":
            "\n        userFunctions[\"Immig16to30_cat.fun\"] = (function (Immig1, userFunctions, func) {\n    return userFunctions['Immig16to30_cat.fun(Immig16to30_cat)'](Immig1, userFunctions, func);\n})\n    ",
          "Immig31to45_cat.fun(Immig31to45_cat)":
            "\n        userFunctions[\"Immig31to45_cat.fun(Immig31to45_cat)\"] = (function (Immig1, userFunctions, func) {\n    return func['ifelse'](Immig1 == 3, 1, func['ifelse'](func['isIn'](Immig1, 0, 1, 2), 0, null));\n})\n    ",
          "Immig31to45_cat.fun":
            "\n        userFunctions[\"Immig31to45_cat.fun\"] = (function (Immig1, userFunctions, func) {\n    return userFunctions['Immig31to45_cat.fun(Immig31to45_cat)'](Immig1, userFunctions, func);\n})\n    ",
          "BMI_cont.fun(weightkg)":
            "\n        userFunctions[\"BMI_cont.fun(weightkg)\"] = (function (weightlb, heightin_hft, heightin_hin, userFunctions, func) {\n    return func['ifelse2'](func['not'](func['is.na'](weightlb)), weightlb / 2.2046226218, null);\n})\n    ",
          "BMI_cont.fun(heightm)":
            "\n        userFunctions[\"BMI_cont.fun(heightm)\"] = (function (weightlb, heightin_hft, heightin_hin, userFunctions, func) {\n    return func['ifelse2'](func['not'](func['is.na'](heightin_hft)) && func['not'](func['is.na'](heightin_hin)), (heightin_hft * 12 + heightin_hin) / 39.3701, null);\n})\n    ",
          "BMI_cont.fun":
            "\n        userFunctions[\"BMI_cont.fun\"] = (function (weightlb, heightin_hft, heightin_hin, userFunctions, func) {\n    return func['ifelse2'](func['not'](func['is.na'](userFunctions['BMI_cont.fun(weightkg)'](weightlb, heightin_hft, heightin_hin, userFunctions, func))) && func['not'](func['is.na'](userFunctions['BMI_cont.fun(heightm)'](weightlb, heightin_hft, heightin_hin, userFunctions, func))), userFunctions['BMI_cont.fun(weightkg)'](weightlb, heightin_hft, heightin_hin, userFunctions, func) / (userFunctions['BMI_cont.fun(heightm)'](weightlb, heightin_hft, heightin_hin, userFunctions, func) * userFunctions['BMI_cont.fun(heightm)'](weightlb, heightin_hft, heightin_hin, userFunctions, func)), null);\n})\n    ",
          "BMI_spline.fun":
            "\n        userFunctions[\"BMI_spline.fun\"] = (function (BMI_cont, userFunctions, func) {\n    return func['ifelse2'](BMI_cont - 35 > 0, BMI_cont - 35, func['ifelse2'](BMI_cont - 35 <= 0, 0, null));\n})\n    ",
          "HeartDis_cat.fun":
            "\n        userFunctions[\"HeartDis_cat.fun\"] = (function (hd, userFunctions, func) {\n    return func['ifelse'](hd == 'hd1', 1, func['ifelse'](hd == 'hd2', 0, null));\n})\n    ",
          "Stroke_cat.fun":
            "\n        userFunctions[\"Stroke_cat.fun\"] = (function (stk, userFunctions, func) {\n    return func['ifelse'](stk == 'stk1', 1, func['ifelse'](stk == 'stk2', 0, null));\n})\n    ",
          "Cancer_cat.fun":
            "\n        userFunctions[\"Cancer_cat.fun\"] = (function (can, userFunctions, func) {\n    return func['ifelse'](can == 'can1', 1, func['ifelse'](can == 'can2', 0, null));\n})\n    ",
          "Diabetes_cat.fun":
            "\n        userFunctions[\"Diabetes_cat.fun\"] = (function (diab, userFunctions, func) {\n    return func['ifelse'](diab == 'diab1', 1, func['ifelse'](diab == 'diab2', 0, null));\n})\n    ",
          "Hypertension_cat.fun":
            "\n        userFunctions[\"Hypertension_cat.fun\"] = (function (bp, userFunctions, func) {\n    return func['ifelse'](bp == 'bp1', 1, func['ifelse'](bp == 'bp2', 0, null));\n})\n    "
        },
        "tables": {},
        "baseline": 0.0000372903,
        "covariates": [
          {
            "name": "Age_cont",
            "extensions": {},
            "fieldType": 2,
            "beta": 0.0831368085304069,
            "referencePoint": 51.9855867845952
          },
          {
            "name": "Age_spline",
            "extensions": {},
            "fieldType": 2,
            "beta": 0.032863950554692,
            "referencePoint": 2.23085276362985
          },
          {
            "name": "QSLightCont_df",
            "displayName": "Light smoker",
            "extensions": {
              "units": "NA",
              "description":
                "Time-varying function for current light and former light smoker"
            },
            "fieldType": 2,
            "opType": "continuous",
            "minValue": 0,
            "maxValue": 1,
            "beta": 0.900307809717107,
            "referencePoint": 0.215339125424739
          },
          {
            "name": "QSHeavyCont_df",
            "displayName": "Heavy smoker",
            "extensions": {
              "units": "NA",
              "description":
                "Time-varying function for current heavy and former heavy smoker"
            },
            "fieldType": 2,
            "opType": "continuous",
            "minValue": 0,
            "maxValue": 1,
            "beta": 1.03948313110627,
            "referencePoint": 0.169791058200741
          },
          {
            "name": "PhysicalActivityLog_cont",
            "extensions": {},
            "fieldType": 2,
            "beta": -0.703145562727891,
            "referencePoint": 0.423291673033803
          },
          {
            "name": "DietScore_cont",
            "displayName": "Diet",
            "extensions": { "units": "NA", "description": "Final diet score" },
            "fieldType": 2,
            "opType": "continuous",
            "minValue": 0,
            "maxValue": 10,
            "beta": -0.0344106524801484,
            "referencePoint": 4.45588356813016
          },
          {
            "name": "BMI_spline",
            "displayName": "BMI Spline",
            "extensions": {
              "units": "kg/m2",
              "description":
                "Body mass index spline- Units above 35, 0 if 35 or less"
            },
            "fieldType": 2,
            "opType": "continuous",
            "minValue": null,
            "maxValue": null,
            "beta": 0.0303768206375058,
            "referencePoint": 0.185952928529901
          },
          {
            "name": "AgeXCancer_int",
            "extensions": {},
            "fieldType": 3,
            "beta": -0.0497850790110705,
            "referencePoint": 1.62081762638986
          },
          {
            "name": "AgeXDiabetes_int",
            "extensions": {},
            "fieldType": 3,
            "beta": -0.0209732533287309,
            "referencePoint": 4.6754430546364
          },
          {
            "name": "AlcoholHeavy_cat",
            "displayName": "Heavy alcohol",
            "extensions": {
              "units": "NA",
              "description": "Heavy drinker- Dummy variable"
            },
            "fieldType": 2,
            "opType": "categorical",
            "categories": [
              {
                "value": "1",
                "displayValue": "Heavy drinker",
                "description":
                  "Males: >21 drinks/week; Females: >14 drinks/week"
              },
              { "value": "0", "displayValue": "Else", "description": "Else" }
            ],
            "beta": 0.0508703699519003,
            "referencePoint": 0.214680858065295
          },
          {
            "name": "AlcoholMod_cat",
            "displayName": "Mod. alcohol",
            "extensions": {
              "units": "NA",
              "description": "Moderate drinker- Dummy variable"
            },
            "fieldType": 2,
            "opType": "categorical",
            "categories": [
              {
                "value": "1",
                "displayValue": "Moderate drinker",
                "description":
                  "Males: 4-21 drinks/week; Females: 3 to 14 drinks/week"
              },
              { "value": "0", "displayValue": "Else", "description": "Else" }
            ],
            "beta": -0.192706462213306,
            "referencePoint": 0.237017319990201
          },
          {
            "name": "DepIndMod_cat",
            "displayName": "Average deprivation",
            "extensions": {
              "units": "NA",
              "description":
                "Moderate level of neightbourhood deprivation- Dummy variable"
            },
            "fieldType": 2,
            "opType": "categorical",
            "categories": [
              {
                "value": "1",
                "displayValue": "Moderate neighbourhood deprivation",
                "description":
                  "3rd quinitle of neighbourhood social and material deprivation (Pampalon's deprivaiton index)"
              },
              { "value": "0", "displayValue": "Else", "description": "Else" }
            ],
            "beta": 0.0690614098959036,
            "referencePoint": 0.635300311884138
          },
          {
            "name": "DepIndHigh_cat",
            "displayName": "High deprivation",
            "extensions": {
              "units": "NA",
              "description":
                "High level of neighbourhood deprivation- Dummy variable"
            },
            "fieldType": 2,
            "opType": "categorical",
            "categories": [
              {
                "value": "1",
                "displayValue": "High neighbourhood deprivation",
                "description":
                  "4th or 5th quintile of neighbourhood social and material deprivation (Pampalon's deprivaiton index)"
              },
              { "value": "0", "displayValue": "Else", "description": "Else" }
            ],
            "beta": 0.220101731941223,
            "referencePoint": 0.157419222739388
          },
          {
            "name": "EduNoGrad_cat",
            "displayName": "<High school",
            "extensions": {
              "units": "NA",
              "description": "Less than high school education- Dummy variable"
            },
            "fieldType": 2,
            "opType": "categorical",
            "categories": [
              {
                "value": "1",
                "displayValue": "Less than high school graduation",
                "description": ""
              },
              { "value": "0", "displayValue": "Else", "description": "" }
            ],
            "beta": 0.185703949355632,
            "referencePoint": 0.171463149773857
          },
          {
            "name": "EduHSGrad_cat",
            "displayName": "High school ",
            "extensions": {
              "units": "NA",
              "description": "High school graduate- Dummy variable"
            },
            "fieldType": 2,
            "opType": "categorical",
            "categories": [
              {
                "value": "1",
                "displayValue": "High school graduate",
                "description": ""
              },
              { "value": "0", "displayValue": "Else", "description": "" }
            ],
            "beta": 0.0863226867368134,
            "referencePoint": 0.249920475029159
          },
          {
            "name": "Immig0to15_cat",
            "displayName": "Immigrate <15y",
            "extensions": {
              "units": "NA",
              "description": "Immigrated <15 years- Dummy variable"
            },
            "fieldType": 2,
            "opType": "categorical",
            "categories": [
              {
                "value": "1",
                "displayValue": "Immigrated <15 years",
                "description": ""
              },
              { "value": "0", "displayValue": "Else", "description": "" }
            ],
            "beta": -0.982657657310987,
            "referencePoint": 0.0394443855370586
          },
          {
            "name": "Immig16to30_cat",
            "displayName": "Immigrate 15-30y",
            "extensions": {
              "units": "NA",
              "description": "Immigrated 16 to 30 years- Dummy variable"
            },
            "fieldType": 2,
            "opType": "categorical",
            "categories": [
              {
                "value": "1",
                "displayValue": "Immigrated 16 to 30 years",
                "description": ""
              },
              { "value": "0", "displayValue": "Else", "description": "" }
            ],
            "beta": -0.404318147113174,
            "referencePoint": 0.0481756788873085
          },
          {
            "name": "Immig31to45_cat",
            "displayName": "Immigrate 31-45y",
            "extensions": {
              "units": "NA",
              "description": "Immigrated 31 to 45 years- Dummy variable"
            },
            "fieldType": 2,
            "opType": "categorical",
            "categories": [
              {
                "value": "1",
                "displayValue": "Immigrated 31 to 45 years",
                "description": ""
              },
              { "value": "0", "displayValue": "Else", "description": "" }
            ],
            "beta": -0.117087334405182,
            "referencePoint": 0.0583804693984256
          },
          {
            "name": "HeartDis_cat",
            "displayName": "Heart disease",
            "extensions": {
              "recommended": "true",
              "units": "NA",
              "description": "Has heart disease- Dummy variable"
            },
            "fieldType": 2,
            "opType": "categorical",
            "categories": [
              {
                "value": "1",
                "displayValue": "Has heart disease",
                "description": ""
              },
              {
                "value": "0",
                "displayValue": "Does not have heart disease",
                "description": ""
              }
            ],
            "beta": 0.379459368136119,
            "referencePoint": 0.0782160081024062
          },
          {
            "name": "Stroke_cat",
            "displayName": "Stroke",
            "extensions": {
              "recommended": "true",
              "units": "NA",
              "description":
                "Suffers from effects of a previous stroke- Dummy variable"
            },
            "fieldType": 2,
            "opType": "categorical",
            "categories": [
              {
                "value": "1",
                "displayValue": "Suffers from effects of a previous stroke",
                "description": ""
              },
              {
                "value": "0",
                "displayValue":
                  "Does not suffer from the effects of a previous stroke",
                "description": ""
              }
            ],
            "beta": 0.224159490570495,
            "referencePoint": 0.0133748203832555
          },
          {
            "name": "Cancer_cat",
            "displayName": "Cancer",
            "extensions": {
              "recommended": "true",
              "units": "NA",
              "description": "Has cancer- Dummy variable"
            },
            "fieldType": 2,
            "opType": "categorical",
            "categories": [
              { "value": "1", "displayValue": "Has cancer", "description": "" },
              {
                "value": "0",
                "displayValue": "Does not have cancer",
                "description": ""
              }
            ],
            "beta": 4.40896143527765,
            "referencePoint": 0.0234370143949338
          },
          {
            "name": "Diabetes_cat",
            "displayName": "Diabetes",
            "extensions": {
              "recommended": "true",
              "units": "NA",
              "description": "Has diabetes- Dummy variable"
            },
            "fieldType": 2,
            "opType": "categorical",
            "categories": [
              {
                "value": "1",
                "displayValue": "Has diabetes",
                "description": ""
              },
              {
                "value": "0",
                "displayValue": "Does not have diabetes",
                "description": ""
              }
            ],
            "beta": 1.98499540516865,
            "referencePoint": 0.0720953275880351
          }
        ]
      },
      "predicate": {
        "equation": "predicateResult = obj['sex'] === 'male'",
        "variables": ["sex"]
      }
    },
    {
      "algorithm": {
        "algorithmType": 0,
        "description": "",
        "derivedFields": [
          {
            "fieldType": 1,
            "name": "Age_cont",
            "opType": 1,
            "equation": "derived = obj['age'];",
            "derivedFrom": [
              {
                "name": "age",
                "displayName": "",
                "extensions": {
                  "question": "What is your age?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 20,
                "maxValue": 99
              }
            ],
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "Age_spline",
            "opType": 1,
            "equation":
              "derived = userFunctions['Age_spline.fun'](obj['Age_cont'], 80, userFunctions, func);",
            "derivedFrom": ["Age_cont"],
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "drk_drkm2",
            "opType": 1,
            "equation":
              "derived = userFunctions['NA0.fun'](obj['drk_drkm'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "drk_drkm",
                "displayName": "",
                "extensions": {
                  "question":
                    "How many drinks did you have last week? (Monday?)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "drk_drkt2",
            "opType": 1,
            "equation":
              "derived = userFunctions['NA0.fun'](obj['drk_drkt'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "drk_drkt",
                "displayName": "",
                "extensions": {
                  "question":
                    "How many drinks did you have last week? (Tuesday?)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "drk_drkw2",
            "opType": 1,
            "equation":
              "derived = userFunctions['NA0.fun'](obj['drk_drkw'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "drk_drkw",
                "displayName": "",
                "extensions": {
                  "question":
                    "How many drinks did you have last week? (Wednesday?)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "drk_drkr2",
            "opType": 1,
            "equation":
              "derived = userFunctions['NA0.fun'](obj['drk_drkr'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "drk_drkr",
                "displayName": "",
                "extensions": {
                  "question":
                    "How many drinks did you have last week? (Thursday?)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "drk_drkf2",
            "opType": 1,
            "equation":
              "derived = userFunctions['NA0.fun'](obj['drk_drkf'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "drk_drkf",
                "displayName": "",
                "extensions": {
                  "question":
                    "How many drinks did you have last week? (Friday)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "drk_drksa2",
            "opType": 1,
            "equation":
              "derived = userFunctions['NA0.fun'](obj['drk_drksa'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "drk_drksa",
                "displayName": "",
                "extensions": {
                  "question":
                    "How many drinks did you have last week? (Saturday?)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "drk_drksu2",
            "opType": 1,
            "equation":
              "derived = userFunctions['NA0.fun'](obj['drk_drksu'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "drk_drksu",
                "displayName": "",
                "extensions": {
                  "question":
                    "How many drinks did you have last week? (Sunday?)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "DrinksLastWeek",
            "opType": 1,
            "equation":
              "derived = userFunctions['DrinksLastWeek.fun'](obj['drk_drkm2'], obj['drk_drkt2'], obj['drk_drkw2'], obj['drk_drkr2'], obj['drk_drkf2'], obj['drk_drksa2'], obj['drk_drksu2'], obj['dany'], userFunctions, func);",
            "derivedFrom": [
              "drk_drkm2",
              "drk_drkt2",
              "drk_drkw2",
              "drk_drkr2",
              "drk_drkf2",
              "drk_drksa2",
              "drk_drksu2",
              {
                "name": "dany",
                "displayName": "",
                "extensions": {
                  "question":
                    "Thinking back over the past week did you have a drink of beer, wine, liquor or any other alcoholic beverage?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "dany1", "displayValue": "Yes" },
                  { "value": "dany2", "displayValue": "No" }
                ]
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "DrinksLastWeek_cont",
            "opType": 1,
            "equation":
              "derived = userFunctions['Max.fun'](obj['DrinksLastWeek'], 26, userFunctions, func);",
            "derivedFrom": ["DrinksLastWeek"],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "Binge",
            "opType": 1,
            "equation":
              "derived = userFunctions['Binge.fun'](obj['db'], obj['dany'], obj['drk_drkm2'], obj['drk_drkt2'], obj['drk_drkw2'], obj['drk_drkr2'], obj['drk_drkf2'], obj['drk_drksa2'], obj['drk_drksu2'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "db",
                "displayName": "",
                "extensions": {
                  "question":
                    "How often in the past 12 months have you had 5 or more drinks on any one ocassion?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "db1", "displayValue": "Never" },
                  { "value": "db2", "displayValue": "Less than once a month" },
                  { "value": "db3", "displayValue": "Once a month" },
                  { "value": "db4", "displayValue": "2 to 3 times  amonth" },
                  { "value": "db5", "displayValue": "Once a week" },
                  { "value": "db6", "displayValue": "More than once a week" }
                ]
              },
              {
                "name": "dany",
                "displayName": "",
                "extensions": {
                  "question":
                    "Thinking back over the past week did you have a drink of beer, wine, liquor or any other alcoholic beverage?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "dany1", "displayValue": "Yes" },
                  { "value": "dany2", "displayValue": "No" }
                ]
              },
              "drk_drkm2",
              "drk_drkt2",
              "drk_drkw2",
              "drk_drkr2",
              "drk_drkf2",
              "drk_drksa2",
              "drk_drksu2"
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "AlcoholType",
            "opType": "categorical",
            "equation":
              "derived = userFunctions['AlcoholType.fun'](obj['Binge'], obj['dany'], obj['DrinksLastWeek_cont'], 2, 14, userFunctions, func);",
            "derivedFrom": [
              "Binge",
              {
                "name": "dany",
                "displayName": "",
                "extensions": {
                  "question":
                    "Thinking back over the past week did you have a drink of beer, wine, liquor or any other alcoholic beverage?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "dany1", "displayValue": "Yes" },
                  { "value": "dany2", "displayValue": "No" }
                ]
              },
              "DrinksLastWeek_cont"
            ],
            "displayName": "Alcohol Status",
            "extensions": {
              "recommended": "true",
              "units": "NA",
              "description": "Type of drinker"
            },
            "categories": [
              {
                "value": "0",
                "displayValue": "Non/light drinker",
                "description": "Males: <4 drinks/week; Females: <3 drinks/week"
              },
              {
                "value": "1",
                "displayValue": "Moderate drinker",
                "description":
                  "Males: 4-21 drinks/week; Females: 3 to 14 drinks/week"
              },
              {
                "value": "2",
                "displayValue": "Heavy drinker",
                "description":
                  "Males: >21 drinks/week; Females: >14 drinks/week"
              }
            ]
          },
          {
            "fieldType": 1,
            "name": "AlcoholMod_cat",
            "opType": "categorical",
            "equation":
              "derived = userFunctions['AlcoholMod_cat.fun'](obj['AlcoholType'], userFunctions, func);",
            "derivedFrom": ["AlcoholType"],
            "displayName": "Mod. alcohol",
            "extensions": {
              "units": "NA",
              "description": "Moderate drinker- Dummy variable"
            },
            "categories": [
              {
                "value": "1",
                "displayValue": "Moderate drinker",
                "description":
                  "Males: 4-21 drinks/week; Females: 3 to 14 drinks/week"
              },
              { "value": "0", "displayValue": "Else", "description": "Else" }
            ]
          },
          {
            "fieldType": 1,
            "name": "AlcoholHeavy_cat",
            "opType": "categorical",
            "equation":
              "derived = userFunctions['AlcoholHeavy_cat.fun'](obj['AlcoholType'], userFunctions, func);",
            "derivedFrom": ["AlcoholType"],
            "displayName": "Heavy alcohol",
            "extensions": {
              "units": "NA",
              "description": "Heavy drinker- Dummy variable"
            },
            "categories": [
              {
                "value": "1",
                "displayValue": "Heavy drinker",
                "description":
                  "Males: >21 drinks/week; Females: >14 drinks/week"
              },
              { "value": "0", "displayValue": "Else", "description": "Else" }
            ]
          },
          {
            "fieldType": 1,
            "name": "QuitTime",
            "opType": "continuous",
            "equation":
              "derived = userFunctions['QuitTime.fun'](obj['stpn'], obj['stpny'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "stpn",
                "displayName": "",
                "extensions": {
                  "question": "When did you stop smoking daily?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  {
                    "value": "stpn1",
                    "displayValue": "Less than one year ago?"
                  },
                  {
                    "value": "stpn2",
                    "displayValue": "1 year to less than 2 years ago?"
                  },
                  {
                    "value": "stpn3",
                    "displayValue": "2 years to less than 3 years ago?"
                  },
                  { "value": "stpn4", "displayValue": "3 or more years ago?" }
                ]
              },
              {
                "name": "stpny",
                "displayName": "",
                "extensions": {
                  "question": "How many years ago was it?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 3,
                "maxValue": null
              }
            ],
            "displayName": "Smoking Quit Time",
            "extensions": {
              "recommended": "true",
              "units": "years",
              "description":
                "Time since quitting smoking. For current and non-smokers, leave missing"
            },
            "minValue": 0,
            "maxValue": null
          },
          {
            "fieldType": 1,
            "name": "TypeOfSmoker",
            "opType": 1,
            "equation":
              "derived = userFunctions['TypeOfSmoker.fun'](obj['smk'], obj['evd'], obj['s100'], obj['cigdayf'], obj['cigdayd'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "smk",
                "displayName": "",
                "extensions": {
                  "question":
                    "At the present time, do you smoke cigarettes daily, occasionally, or not at all?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "smk1", "displayValue": "Daily" },
                  { "value": "smk2", "displayValue": "Occasionally" },
                  { "value": "smk3", "displayValue": "Not at all" }
                ]
              },
              {
                "fieldType": 0,
                "name": "evd",
                "displayName": "",
                "extensions": {}
              },
              {
                "name": "s100",
                "displayName": "",
                "extensions": {
                  "question":
                    "In your lifetime, have you smoked a total of 100 or more cigarettes (about 4 packs)?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "s1001", "displayValue": "Yes" },
                  { "value": "s1002", "displayValue": "No" }
                ]
              },
              {
                "name": "cigdayf",
                "displayName": "",
                "extensions": {
                  "question":
                    "How many cigarettes did you usually smoke each day?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 1,
                "maxValue": 99
              },
              {
                "name": "cigdayd",
                "displayName": "",
                "extensions": {
                  "question": "How many cigarettes do you smoke each day now?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "QSLightCont_df",
            "opType": "continuous",
            "equation":
              "derived = func['ifelse'](func['not'](func['is.na'](obj['TypeOfSmoker'])), userFunctions['QSLightCont_df1.fun'](obj['TypeOfSmoker'], obj['QuitTime'], 26, userFunctions, func), func['ifelse'](func['not'](func['is.na'](obj['SmokeDaily'])), userFunctions['QSLightCont_df2.fun'](obj['SmokeDaily'], obj['DailyCig'], obj['Age_cont'], obj['AgeDailyQuit'], 26, userFunctions, func), null));",
            "derivedFrom": [
              "TypeOfSmoker",
              "QuitTime",
              {
                "fieldType": 0,
                "name": "SmokeDaily",
                "displayName": "",
                "extensions": {}
              },
              {
                "fieldType": 0,
                "name": "DailyCig",
                "displayName": "",
                "extensions": {}
              },
              "Age_cont",
              {
                "fieldType": 0,
                "name": "AgeDailyQuit",
                "displayName": "",
                "extensions": {}
              }
            ],
            "displayName": "Light smoker",
            "extensions": {
              "units": "NA",
              "description":
                "Time-varying function for current light and former light smoker"
            },
            "minValue": 0,
            "maxValue": 1
          },
          {
            "fieldType": 1,
            "name": "QSHeavyCont_df",
            "opType": "continuous",
            "equation":
              "derived = func['ifelse'](func['not'](func['is.na'](obj['TypeOfSmoker'])), userFunctions['QSHeavyCont_df1.fun'](obj['TypeOfSmoker'], obj['QuitTime'], 26, userFunctions, func), func['ifelse'](func['not'](func['is.na'](obj['SmokeDaily'])), userFunctions['QSHeavyCont_df2.fun'](obj['SmokeDaily'], obj['DailyCig'], obj['Age_cont'], obj['AgeDailyQuit'], 26, userFunctions, func), null));",
            "derivedFrom": [
              "TypeOfSmoker",
              "QuitTime",
              {
                "fieldType": 0,
                "name": "SmokeDaily",
                "displayName": "",
                "extensions": {}
              },
              {
                "fieldType": 0,
                "name": "DailyCig",
                "displayName": "",
                "extensions": {}
              },
              "Age_cont",
              {
                "fieldType": 0,
                "name": "AgeDailyQuit",
                "displayName": "",
                "extensions": {}
              }
            ],
            "displayName": "Heavy smoker",
            "extensions": {
              "units": "NA",
              "description":
                "Time-varying function for current heavy and former heavy smoker"
            },
            "minValue": 0,
            "maxValue": 1
          },
          {
            "fieldType": 1,
            "name": "dfruit",
            "opType": 1,
            "equation":
              "derived = userFunctions['dfruit.fun'](obj['frt'], obj['frtu'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "frt",
                "displayName": "",
                "extensions": {
                  "question":
                    "Not counting juice, how often do you usually eat fruit?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              },
              {
                "name": "frtu",
                "displayName": "",
                "extensions": {
                  "question": "Is that {0} times per day, week, month or year?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "frtd", "displayValue": "Day" },
                  { "value": "frtw", "displayValue": "Week" },
                  { "value": "frtm", "displayValue": "Month" }
                ]
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "dsalad",
            "opType": 1,
            "equation":
              "derived = userFunctions['dsalad.fun'](obj['sal'], obj['salu'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "sal",
                "displayName": "",
                "extensions": {
                  "question": "How often do you (usually) eat green salad?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              },
              {
                "name": "salu",
                "displayName": "",
                "extensions": {
                  "question": "Is that {0} times a day, week, month or year?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "sald", "displayValue": "Day" },
                  { "value": "salw", "displayValue": "Week" },
                  { "value": "salm", "displayValue": "Month" },
                  { "value": "saly", "displayValue": "Year" }
                ]
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "dpotato",
            "opType": 1,
            "equation":
              "derived = userFunctions['dpotato.fun'](obj['pot'], obj['potu'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "pot",
                "displayName": "",
                "extensions": {
                  "question":
                    "How often do you usually eat potatoes, not including french fries, fried potatoes or potato chips?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              },
              {
                "name": "potu",
                "displayName": "",
                "extensions": {
                  "question": "Is that {0} times per day, week, month or year?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "potd", "displayValue": "Day" },
                  { "value": "potw", "displayValue": "Week" },
                  { "value": "potm", "displayValue": "Month" },
                  { "value": "poty", "displayValue": "Year" }
                ]
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "dcarrot",
            "opType": 1,
            "equation":
              "derived = userFunctions['dcarrot.fun'](obj['car'], obj['caru'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "car",
                "displayName": "",
                "extensions": {
                  "question": "How often do you (usually) eat carrots?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              },
              {
                "name": "caru",
                "displayName": "",
                "extensions": {
                  "question": "Is that {0} times per day, week, month or year?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "card", "displayValue": "Day" },
                  { "value": "carw", "displayValue": "Week" },
                  { "value": "carm", "displayValue": "Month" },
                  { "value": "cary", "displayValue": "Year" }
                ]
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "dveg",
            "opType": 1,
            "equation":
              "derived = userFunctions['dveg.fun'](obj['veg'], obj['vegu'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "veg",
                "displayName": "",
                "extensions": {
                  "question":
                    "Not counting carrots, potatoes or salad, how many servings of other vegetables do you usually eat?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              },
              {
                "name": "vegu",
                "displayName": "",
                "extensions": {
                  "question": "Is that {0} times per day, week, month or year?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "vegd", "displayValue": "Day" },
                  { "value": "vegw", "displayValue": "Week" },
                  { "value": "vegm", "displayValue": "Month" },
                  { "value": "vegy", "displayValue": "Year" }
                ]
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "djuice",
            "opType": 1,
            "equation":
              "derived = userFunctions['djuice.fun'](obj['jui'], obj['juiu'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "jui",
                "displayName": "",
                "extensions": {
                  "question":
                    "How often do you usually drink fruit juices such as orange, grapefruit or tomato?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              },
              {
                "name": "juiu",
                "displayName": "",
                "extensions": {
                  "question": "Is that {0} times per day, week, month or year?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "juid", "displayValue": "Day" },
                  { "value": "juiw", "displayValue": "Week" },
                  { "value": "juim", "displayValue": "Month" },
                  { "value": "juiy", "displayValue": "Year" }
                ]
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "FruitVeg",
            "opType": 1,
            "equation":
              "derived = userFunctions['FruitVeg.fun'](obj['dfruit'], obj['dsalad'], obj['dpotato'], obj['dcarrot'], obj['dveg'], userFunctions, func);",
            "derivedFrom": ["dfruit", "dsalad", "dpotato", "dcarrot", "dveg"],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "FruitVeg8Max",
            "opType": 1,
            "equation":
              "derived = userFunctions['FruitVeg8Max.fun'](obj['FruitVeg'], userFunctions, func);",
            "derivedFrom": ["FruitVeg"],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "HighPotatoFlag",
            "opType": 1,
            "equation":
              "derived = userFunctions['HighPotatoFlag.fun'](obj['dpotato'], userFunctions, func);",
            "derivedFrom": ["dpotato"],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "NoCarrotFlag",
            "opType": 1,
            "equation":
              "derived = userFunctions['NoCarrotFlag.fun'](obj['dcarrot'], userFunctions, func);",
            "derivedFrom": ["dcarrot"],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "HighJuice",
            "opType": 1,
            "equation":
              "derived = userFunctions['HighJuice.fun'](obj['djuice'], userFunctions, func);",
            "derivedFrom": ["djuice"],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "DietScore",
            "opType": "continuous",
            "equation":
              "derived = userFunctions['DietScore.fun'](obj['FruitVeg8Max'], obj['HighPotatoFlag'], obj['NoCarrotFlag'], obj['HighJuice'], userFunctions, func);",
            "derivedFrom": [
              "FruitVeg8Max",
              "HighPotatoFlag",
              "NoCarrotFlag",
              "HighJuice"
            ],
            "displayName": "Diet",
            "extensions": {
              "recommended": "true",
              "units": "NA",
              "description": "Diet score"
            },
            "minValue": 0,
            "maxValue": 10
          },
          {
            "fieldType": 1,
            "name": "DietScore_cont",
            "opType": "continuous",
            "equation":
              "derived = userFunctions['DietScore_cont.fun'](obj['DietScore'], userFunctions, func);",
            "derivedFrom": ["DietScore"],
            "displayName": "Diet",
            "extensions": { "units": "NA", "description": "Final diet score" },
            "minValue": 0,
            "maxValue": 10
          },
          {
            "fieldType": 1,
            "name": "walk",
            "opType": 1,
            "equation":
              "derived = userFunctions['Activity.fun'](obj['lpa_lpa1'], obj['lpam_lpa1'], obj['lpat_lpa1'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "lpa_lpa1",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you done any of the following in the past 3 months? (Walking for exercise)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "Yes", "displayValue": "Yes" },
                  { "value": "No", "displayValue": "No" }
                ]
              },
              {
                "name": "lpam_lpa1",
                "displayName": "",
                "extensions": {
                  "question":
                    "How much time did you spend on each ocassion? (Walking for exercise)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "lpa15", "displayValue": "1 to 15 min" },
                  { "value": "lpa30", "displayValue": "16 to 30 min" },
                  { "value": "lpa60", "displayValue": "31 to 60 min" },
                  { "value": "lpa61", "displayValue": "More than 60 min" }
                ]
              },
              {
                "name": "lpat_lpa1",
                "displayName": "",
                "extensions": {
                  "question":
                    "In the past 3 months, how many times did you participate in each activity? (Walking for exercise)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "garden",
            "opType": 1,
            "equation":
              "derived = userFunctions['Activity.fun'](obj['lpa_lpa2'], obj['lpam_lpa2'], obj['lpat_lpa2'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "lpa_lpa2",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you done any of the following in the past 3 months? (Gardening or yard work)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "Yes", "displayValue": "Yes" },
                  { "value": "No", "displayValue": "No" }
                ]
              },
              {
                "name": "lpam_lpa2",
                "displayName": "",
                "extensions": {
                  "question":
                    "How much time did you spend on each ocassion? (Gardening or yard work)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "lpa15", "displayValue": "1 to 15 min" },
                  { "value": "lpa30", "displayValue": "16 to 30 min" },
                  { "value": "lpa60", "displayValue": "31 to 60 min" },
                  { "value": "lpa61", "displayValue": "More than 60 min" }
                ]
              },
              {
                "name": "lpat_lpa2",
                "displayName": "",
                "extensions": {
                  "question":
                    "In the past 3 months, how many times did you participate in each activity? (Gardening or yard work)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "swim",
            "opType": 1,
            "equation":
              "derived = userFunctions['Activity.fun'](obj['lpa_lpa3'], obj['lpam_lpa3'], obj['lpat_lpa3'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "lpa_lpa3",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you done any of the following in the past 3 months? (Swimming)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "Yes", "displayValue": "Yes" },
                  { "value": "No", "displayValue": "No" }
                ]
              },
              {
                "name": "lpam_lpa3",
                "displayName": "",
                "extensions": {
                  "question":
                    "How much time did you spend on each ocassion? (Swimming)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "lpa15", "displayValue": "1 to 15 min" },
                  { "value": "lpa30", "displayValue": "16 to 30 min" },
                  { "value": "lpa60", "displayValue": "31 to 60 min" },
                  { "value": "lpa61", "displayValue": "More than 60 min" }
                ]
              },
              {
                "name": "lpat_lpa3",
                "displayName": "",
                "extensions": {
                  "question":
                    "In the past 3 months, how many times did you participate in each activity? (Swimming)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "bike",
            "opType": 1,
            "equation":
              "derived = userFunctions['Activity.fun'](obj['lpa_lpa4'], obj['lpam_lpa4'], obj['lpat_lpa4'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "lpa_lpa4",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you done any of the following in the past 3 months? (Bicycling)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "Yes", "displayValue": "Yes" },
                  { "value": "No", "displayValue": "No" }
                ]
              },
              {
                "name": "lpam_lpa4",
                "displayName": "",
                "extensions": {
                  "question":
                    "How much time did you spend on each ocassion? (Bicycling)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "lpa15", "displayValue": "1 to 15 min" },
                  { "value": "lpa30", "displayValue": "16 to 30 min" },
                  { "value": "lpa60", "displayValue": "31 to 60 min" },
                  { "value": "lpa61", "displayValue": "More than 60 min" }
                ]
              },
              {
                "name": "lpat_lpa4",
                "displayName": "",
                "extensions": {
                  "question":
                    "In the past 3 months, how many times did you participate in each activity? (Bicycling)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "dance",
            "opType": 1,
            "equation":
              "derived = userFunctions['Activity.fun'](obj['lpa_lpa5'], obj['lpam_lpa5'], obj['lpat_lpa5'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "lpa_lpa5",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you done any of the following in the past 3 months? (Popular or social dance)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "Yes", "displayValue": "Yes" },
                  { "value": "No", "displayValue": "No" }
                ]
              },
              {
                "name": "lpam_lpa5",
                "displayName": "",
                "extensions": {
                  "question":
                    "How much time did you spend on each ocassion? (Popular or social dance)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "lpa15", "displayValue": "1 to 15 min" },
                  { "value": "lpa30", "displayValue": "16 to 30 min" },
                  { "value": "lpa60", "displayValue": "31 to 60 min" },
                  { "value": "lpa61", "displayValue": "More than 60 min" }
                ]
              },
              {
                "name": "lpat_lpa5",
                "displayName": "",
                "extensions": {
                  "question":
                    "In the past 3 months, how many times did you participate in each activity? (Popular or social dance)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "hexercises",
            "opType": 1,
            "equation":
              "derived = userFunctions['Activity.fun'](obj['lpa_lpa6'], obj['lpam_lpa6'], obj['lpat_lpa6'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "lpa_lpa6",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you done any of the following in the past 3 months? (Home exercises)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "Yes", "displayValue": "Yes" },
                  { "value": "No", "displayValue": "No" }
                ]
              },
              {
                "name": "lpam_lpa6",
                "displayName": "",
                "extensions": {
                  "question":
                    "How much time did you spend on each ocassion? (Home exercises)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "lpa15", "displayValue": "1 to 15 min" },
                  { "value": "lpa30", "displayValue": "16 to 30 min" },
                  { "value": "lpa60", "displayValue": "31 to 60 min" },
                  { "value": "lpa61", "displayValue": "More than 60 min" }
                ]
              },
              {
                "name": "lpat_lpa6",
                "displayName": "",
                "extensions": {
                  "question":
                    "In the past 3 months, how many times did you participate in each activity? (Home exercises)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "hockey",
            "opType": 1,
            "equation":
              "derived = userFunctions['Activity.fun'](obj['lpa_lpa7'], obj['lpam_lpa7'], obj['lpat_lpa7'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "lpa_lpa7",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you done any of the following in the past 3 months? (Ice hockey)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "Yes", "displayValue": "Yes" },
                  { "value": "No", "displayValue": "No" }
                ]
              },
              {
                "name": "lpam_lpa7",
                "displayName": "",
                "extensions": {
                  "question":
                    "How much time did you spend on each ocassion? (Ice hockey)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "lpa15", "displayValue": "1 to 15 min" },
                  { "value": "lpa30", "displayValue": "16 to 30 min" },
                  { "value": "lpa60", "displayValue": "31 to 60 min" },
                  { "value": "lpa61", "displayValue": "More than 60 min" }
                ]
              },
              {
                "name": "lpat_lpa7",
                "displayName": "",
                "extensions": {
                  "question":
                    "In the past 3 months, how many times did you participate in each activity? (Ice hockey)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "skate",
            "opType": 1,
            "equation":
              "derived = userFunctions['Activity.fun'](obj['lpa_lpa8'], obj['lpam_lpa8'], obj['lpat_lpa8'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "lpa_lpa8",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you done any of the following in the past 3 months? (Ice skating)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "Yes", "displayValue": "Yes" },
                  { "value": "No", "displayValue": "No" }
                ]
              },
              {
                "name": "lpam_lpa8",
                "displayName": "",
                "extensions": {
                  "question":
                    "How much time did you spend on each ocassion? (Ice skating)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "lpa15", "displayValue": "1 to 15 min" },
                  { "value": "lpa30", "displayValue": "16 to 30 min" },
                  { "value": "lpa60", "displayValue": "31 to 60 min" },
                  { "value": "lpa61", "displayValue": "More than 60 min" }
                ]
              },
              {
                "name": "lpat_lpa8",
                "displayName": "",
                "extensions": {
                  "question":
                    "In the past 3 months, how many times did you participate in each activity? (Ice skating)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "inline",
            "opType": 1,
            "equation":
              "derived = userFunctions['Activity.fun'](obj['lpa_lpa9'], obj['lpam_lpa9'], obj['lpat_lpa9'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "lpa_lpa9",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you done any of the following in the past 3 months? (In-line skating or rollerblading)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "Yes", "displayValue": "Yes" },
                  { "value": "No", "displayValue": "No" }
                ]
              },
              {
                "name": "lpam_lpa9",
                "displayName": "",
                "extensions": {
                  "question":
                    "How much time did you spend on each ocassion? (In-line skating or rollerblading)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "lpa15", "displayValue": "1 to 15 min" },
                  { "value": "lpa30", "displayValue": "16 to 30 min" },
                  { "value": "lpa60", "displayValue": "31 to 60 min" },
                  { "value": "lpa61", "displayValue": "More than 60 min" }
                ]
              },
              {
                "name": "lpat_lpa9",
                "displayName": "",
                "extensions": {
                  "question":
                    "In the past 3 months, how many times did you participate in each activity? (In-line skating or rollerblading)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "jogrun",
            "opType": 1,
            "equation":
              "derived = userFunctions['Activity.fun'](obj['lpa_lpa10'], obj['lpam_lpa10'], obj['lpat_lpa10'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "lpa_lpa10",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you done any of the following in the past 3 months? (Jogging or running)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "Yes", "displayValue": "Yes" },
                  { "value": "No", "displayValue": "No" }
                ]
              },
              {
                "name": "lpam_lpa10",
                "displayName": "",
                "extensions": {
                  "question":
                    "How much time did you spend on each ocassion? (Jogging or running)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "lpa15", "displayValue": "1 to 15 min" },
                  { "value": "lpa30", "displayValue": "16 to 30 min" },
                  { "value": "lpa60", "displayValue": "31 to 60 min" },
                  { "value": "lpa61", "displayValue": "More than 60 min" }
                ]
              },
              {
                "name": "lpat_lpa10",
                "displayName": "",
                "extensions": {
                  "question":
                    "In the past 3 months, how many times did you participate in each activity? (Jogging or running)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "golf",
            "opType": 1,
            "equation":
              "derived = userFunctions['Activity.fun'](obj['lpa_lpa11'], obj['lpam_lpa11'], obj['lpat_lpa11'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "lpa_lpa11",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you done any of the following in the past 3 months? (Golfing)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "Yes", "displayValue": "Yes" },
                  { "value": "No", "displayValue": "No" }
                ]
              },
              {
                "name": "lpam_lpa11",
                "displayName": "",
                "extensions": {
                  "question":
                    "How much time did you spend on each ocassion? (Golfing)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "lpa15", "displayValue": "1 to 15 min" },
                  { "value": "lpa30", "displayValue": "16 to 30 min" },
                  { "value": "lpa60", "displayValue": "31 to 60 min" },
                  { "value": "lpa61", "displayValue": "More than 60 min" }
                ]
              },
              {
                "name": "lpat_lpa11",
                "displayName": "",
                "extensions": {
                  "question":
                    "In the past 3 months, how many times did you participate in each activity? (Golfing)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "aerobics",
            "opType": 1,
            "equation":
              "derived = userFunctions['Activity.fun'](obj['lpa_lpa12'], obj['lpam_lpa12'], obj['lpat_lpa12'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "lpa_lpa12",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you done any of the following in the past 3 months? (Exercise class or aerobics)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "Yes", "displayValue": "Yes" },
                  { "value": "No", "displayValue": "No" }
                ]
              },
              {
                "name": "lpam_lpa12",
                "displayName": "",
                "extensions": {
                  "question":
                    "How much time did you spend on each ocassion? (Exercise class or aerobics)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "lpa15", "displayValue": "1 to 15 min" },
                  { "value": "lpa30", "displayValue": "16 to 30 min" },
                  { "value": "lpa60", "displayValue": "31 to 60 min" },
                  { "value": "lpa61", "displayValue": "More than 60 min" }
                ]
              },
              {
                "name": "lpat_lpa12",
                "displayName": "",
                "extensions": {
                  "question":
                    "In the past 3 months, how many times did you participate in each activity? (Exercise class or aerobics)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "ski",
            "opType": 1,
            "equation":
              "derived = userFunctions['Activity.fun'](obj['lpa_lpa13'], obj['lpam_lpa13'], obj['lpat_lpa13'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "lpa_lpa13",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you done any of the following in the past 3 months? (Downhill skiing or snowboarding)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "Yes", "displayValue": "Yes" },
                  { "value": "No", "displayValue": "No" }
                ]
              },
              {
                "name": "lpam_lpa13",
                "displayName": "",
                "extensions": {
                  "question":
                    "How much time did you spend on each ocassion? (Downhill skiing or snowboarding)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "lpa15", "displayValue": "1 to 15 min" },
                  { "value": "lpa30", "displayValue": "16 to 30 min" },
                  { "value": "lpa60", "displayValue": "31 to 60 min" },
                  { "value": "lpa61", "displayValue": "More than 60 min" }
                ]
              },
              {
                "name": "lpat_lpa13",
                "displayName": "",
                "extensions": {
                  "question":
                    "In the past 3 months, how many times did you participate in each activity? (Downhill skiing or snowboarding)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "bowl",
            "opType": 1,
            "equation":
              "derived = userFunctions['Activity.fun'](obj['lpa_lpa14'], obj['lpam_lpa14'], obj['lpat_lpa14'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "lpa_lpa14",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you done any of the following in the past 3 months? (Bowling)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "Yes", "displayValue": "Yes" },
                  { "value": "No", "displayValue": "No" }
                ]
              },
              {
                "name": "lpam_lpa14",
                "displayName": "",
                "extensions": {
                  "question":
                    "How much time did you spend on each ocassion? (Bowling)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "lpa15", "displayValue": "1 to 15 min" },
                  { "value": "lpa30", "displayValue": "16 to 30 min" },
                  { "value": "lpa60", "displayValue": "31 to 60 min" },
                  { "value": "lpa61", "displayValue": "More than 60 min" }
                ]
              },
              {
                "name": "lpat_lpa14",
                "displayName": "",
                "extensions": {
                  "question":
                    "In the past 3 months, how many times did you participate in each activity? (Bowling)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "baseball",
            "opType": 1,
            "equation":
              "derived = userFunctions['Activity.fun'](obj['lpa_lpa15'], obj['lpam_lpa15'], obj['lpat_lpa15'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "lpa_lpa15",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you done any of the following in the past 3 months? (Baseball or softball)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "Yes", "displayValue": "Yes" },
                  { "value": "No", "displayValue": "No" }
                ]
              },
              {
                "name": "lpam_lpa15",
                "displayName": "",
                "extensions": {
                  "question":
                    "How much time did you spend on each ocassion? (Baseball or softball)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "lpa15", "displayValue": "1 to 15 min" },
                  { "value": "lpa30", "displayValue": "16 to 30 min" },
                  { "value": "lpa60", "displayValue": "31 to 60 min" },
                  { "value": "lpa61", "displayValue": "More than 60 min" }
                ]
              },
              {
                "name": "lpat_lpa15",
                "displayName": "",
                "extensions": {
                  "question":
                    "In the past 3 months, how many times did you participate in each activity? (Baseball or softball)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "tennis",
            "opType": 1,
            "equation":
              "derived = userFunctions['Activity.fun'](obj['lpa_lpa16'], obj['lpam_lpa16'], obj['lpat_lpa16'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "lpa_lpa16",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you done any of the following in the past 3 months? (Tennis)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "Yes", "displayValue": "Yes" },
                  { "value": "No", "displayValue": "No" }
                ]
              },
              {
                "name": "lpam_lpa16",
                "displayName": "",
                "extensions": {
                  "question":
                    "How much time did you spend on each ocassion? (Tennis)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "lpa15", "displayValue": "1 to 15 min" },
                  { "value": "lpa30", "displayValue": "16 to 30 min" },
                  { "value": "lpa60", "displayValue": "31 to 60 min" },
                  { "value": "lpa61", "displayValue": "More than 60 min" }
                ]
              },
              {
                "name": "lpat_lpa16",
                "displayName": "",
                "extensions": {
                  "question":
                    "In the past 3 months, how many times did you participate in each activity? (Tennis)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "weights",
            "opType": 1,
            "equation":
              "derived = userFunctions['Activity.fun'](obj['lpa_lpa17'], obj['lpam_lpa17'], obj['lpat_lpa17'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "lpa_lpa17",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you done any of the following in the past 3 months? (Weight-training)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "Yes", "displayValue": "Yes" },
                  { "value": "No", "displayValue": "No" }
                ]
              },
              {
                "name": "lpam_lpa17",
                "displayName": "",
                "extensions": {
                  "question":
                    "How much time did you spend on each ocassion? (Weight-training)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "lpa15", "displayValue": "1 to 15 min" },
                  { "value": "lpa30", "displayValue": "16 to 30 min" },
                  { "value": "lpa60", "displayValue": "31 to 60 min" },
                  { "value": "lpa61", "displayValue": "More than 60 min" }
                ]
              },
              {
                "name": "lpat_lpa17",
                "displayName": "",
                "extensions": {
                  "question":
                    "In the past 3 months, how many times did you participate in each activity? (Weight-training)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "fishing",
            "opType": 1,
            "equation":
              "derived = userFunctions['Activity.fun'](obj['lpa_lpa18'], obj['lpam_lpa18'], obj['lpat_lpa18'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "lpa_lpa18",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you done any of the following in the past 3 months? (Fishing)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "Yes", "displayValue": "Yes" },
                  { "value": "No", "displayValue": "No" }
                ]
              },
              {
                "name": "lpam_lpa18",
                "displayName": "",
                "extensions": {
                  "question":
                    "How much time did you spend on each ocassion? (Fishing)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "lpa15", "displayValue": "1 to 15 min" },
                  { "value": "lpa30", "displayValue": "16 to 30 min" },
                  { "value": "lpa60", "displayValue": "31 to 60 min" },
                  { "value": "lpa61", "displayValue": "More than 60 min" }
                ]
              },
              {
                "name": "lpat_lpa18",
                "displayName": "",
                "extensions": {
                  "question":
                    "In the past 3 months, how many times did you participate in each activity? (Fishing)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "volleyball",
            "opType": 1,
            "equation":
              "derived = userFunctions['Activity.fun'](obj['lpa_lpa19'], obj['lpam_lpa19'], obj['lpat_lpa19'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "lpa_lpa19",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you done any of the following in the past 3 months? (Volleyball)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "Yes", "displayValue": "Yes" },
                  { "value": "No", "displayValue": "No" }
                ]
              },
              {
                "name": "lpam_lpa19",
                "displayName": "",
                "extensions": {
                  "question":
                    "How much time did you spend on each ocassion? (Volleyball)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "lpa15", "displayValue": "1 to 15 min" },
                  { "value": "lpa30", "displayValue": "16 to 30 min" },
                  { "value": "lpa60", "displayValue": "31 to 60 min" },
                  { "value": "lpa61", "displayValue": "More than 60 min" }
                ]
              },
              {
                "name": "lpat_lpa19",
                "displayName": "",
                "extensions": {
                  "question":
                    "In the past 3 months, how many times did you participate in each activity? (Volleyball)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "basketball",
            "opType": 1,
            "equation":
              "derived = userFunctions['Activity.fun'](obj['lpa_lpa20'], obj['lpam_lpa20'], obj['lpat_lpa20'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "lpa_lpa20",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you done any of the following in the past 3 months? (Basketball)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "Yes", "displayValue": "Yes" },
                  { "value": "No", "displayValue": "No" }
                ]
              },
              {
                "name": "lpam_lpa20",
                "displayName": "",
                "extensions": {
                  "question":
                    "How much time did you spend on each ocassion? (Basketball)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "lpa15", "displayValue": "1 to 15 min" },
                  { "value": "lpa30", "displayValue": "16 to 30 min" },
                  { "value": "lpa60", "displayValue": "31 to 60 min" },
                  { "value": "lpa61", "displayValue": "More than 60 min" }
                ]
              },
              {
                "name": "lpat_lpa20",
                "displayName": "",
                "extensions": {
                  "question":
                    "In the past 3 months, how many times did you participate in each activity? (Basketball)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "soccer",
            "opType": 1,
            "equation":
              "derived = userFunctions['Activity.fun'](obj['lpa_lpa21'], obj['lpam_lpa21'], obj['lpat_lpa21'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "lpa_lpa21",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you done any of the following in the past 3 months? (Soccer)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "Yes", "displayValue": "Yes" },
                  { "value": "No", "displayValue": "No" }
                ]
              },
              {
                "name": "lpam_lpa21",
                "displayName": "",
                "extensions": {
                  "question":
                    "How much time did you spend on each ocassion? (Soccer)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "lpa15", "displayValue": "1 to 15 min" },
                  { "value": "lpa30", "displayValue": "16 to 30 min" },
                  { "value": "lpa60", "displayValue": "31 to 60 min" },
                  { "value": "lpa61", "displayValue": "More than 60 min" }
                ]
              },
              {
                "name": "lpat_lpa21",
                "displayName": "",
                "extensions": {
                  "question":
                    "In the past 3 months, how many times did you participate in each activity? (Soccer)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "other",
            "opType": 1,
            "equation":
              "derived = userFunctions['Activity.fun'](obj['lpa_lpa22'], obj['lpam_lpa22'], obj['lpat_lpa22'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "lpa_lpa22",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you done any of the following in the past 3 months? (Other)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "Yes", "displayValue": "Yes" },
                  { "value": "No", "displayValue": "No" }
                ]
              },
              {
                "name": "lpam_lpa22",
                "displayName": "",
                "extensions": {
                  "question":
                    "How much time did you spend on each ocassion? (Other)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "lpa15", "displayValue": "1 to 15 min" },
                  { "value": "lpa30", "displayValue": "16 to 30 min" },
                  { "value": "lpa60", "displayValue": "31 to 60 min" },
                  { "value": "lpa61", "displayValue": "More than 60 min" }
                ]
              },
              {
                "name": "lpat_lpa22",
                "displayName": "",
                "extensions": {
                  "question":
                    "In the past 3 months, how many times did you participate in each activity? (Other)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "PhysicalActivity",
            "opType": "continuous",
            "equation":
              "derived = userFunctions['PhysicalActivity.fun'](obj['lpa_lpa0'], obj['walk'], obj['garden'], obj['swim'], obj['bike'], obj['dance'], obj['hexercises'], obj['hockey'], obj['skate'], obj['inline'], obj['jogrun'], obj['golf'], obj['aerobics'], obj['ski'], obj['bowl'], obj['baseball'], obj['tennis'], obj['weights'], obj['fishing'], obj['volleyball'], obj['basketball'], obj['soccer'], obj['other'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "lpa_lpa0",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you done any of the following in the past 3 months? (No physical activity)",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "Yes", "displayValue": "Yes" },
                  { "value": "No", "displayValue": "No" }
                ]
              },
              "walk",
              "garden",
              "swim",
              "bike",
              "dance",
              "hexercises",
              "hockey",
              "skate",
              "inline",
              "jogrun",
              "golf",
              "aerobics",
              "ski",
              "bowl",
              "baseball",
              "tennis",
              "weights",
              "fishing",
              "volleyball",
              "basketball",
              "soccer",
              "other"
            ],
            "displayName": "Activity",
            "extensions": {
              "recommended": "true",
              "units": "METs/day",
              "description":
                "Average daily leisure time energy expenditure in METs"
            },
            "minValue": 0,
            "maxValue": 10
          },
          {
            "fieldType": 1,
            "name": "PhysicalActivityLog_cont",
            "opType": 1,
            "equation":
              "derived = userFunctions['PhysicalActivityLog_cont.fun'](obj['PhysicalActivity'], userFunctions, func);",
            "derivedFrom": ["PhysicalActivity"],
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "DepInd",
            "opType": "categorical",
            "equation":
              "derived = userFunctions['DepInd.fun'](obj['dep'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "dep",
                "displayName": "",
                "extensions": {
                  "question":
                    "What is the level of social support and wealth in your neighbourhood compared to the rest of your country?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "dep1", "displayValue": "Above average" },
                  { "value": "dep2", "displayValue": "Average" },
                  { "value": "dep3", "displayValue": "Below average" }
                ]
              }
            ],
            "displayName": "Deprivation Level",
            "extensions": {
              "recommended": "true",
              "units": "NA",
              "description": "Neighbourhood deprivation level"
            },
            "categories": [
              {
                "value": "0",
                "displayValue": "Low level of neighbourhood deprivation",
                "description":
                  "1st or 2nd quintile of neighbourhood social and material deprivation (Pampalon's deprivaiton index)"
              },
              {
                "value": "1",
                "displayValue": "Moderate level of neighbourhood deprivation",
                "description":
                  "3rd quinitle of neighbourhood social and material deprivation (Pampalon's deprivaiton index)"
              },
              {
                "value": "2",
                "displayValue": "High level of neighbourhood deprivation",
                "description":
                  "4th or 5th quintile of neighbourhood social and material deprivation (Pampalon's deprivaiton index)"
              }
            ]
          },
          {
            "fieldType": 1,
            "name": "DepIndHigh_cat",
            "opType": "categorical",
            "equation":
              "derived = userFunctions['DepIndHigh_cat.fun'](obj['DepInd'], userFunctions, func);",
            "derivedFrom": ["DepInd"],
            "displayName": "High deprivation",
            "extensions": {
              "units": "NA",
              "description":
                "High level of neighbourhood deprivation- Dummy variable"
            },
            "categories": [
              {
                "value": "1",
                "displayValue": "High neighbourhood deprivation",
                "description":
                  "4th or 5th quintile of neighbourhood social and material deprivation (Pampalon's deprivaiton index)"
              },
              { "value": "0", "displayValue": "Else", "description": "Else" }
            ]
          },
          {
            "fieldType": 1,
            "name": "DepIndMod_cat",
            "opType": "categorical",
            "equation":
              "derived = userFunctions['DepIndMod_cat.fun'](obj['DepInd'], userFunctions, func);",
            "derivedFrom": ["DepInd"],
            "displayName": "Average deprivation",
            "extensions": {
              "units": "NA",
              "description":
                "Moderate level of neightbourhood deprivation- Dummy variable"
            },
            "categories": [
              {
                "value": "1",
                "displayValue": "Moderate neighbourhood deprivation",
                "description":
                  "3rd quinitle of neighbourhood social and material deprivation (Pampalon's deprivaiton index)"
              },
              { "value": "0", "displayValue": "Else", "description": "Else" }
            ]
          },
          {
            "fieldType": 1,
            "name": "Edu2",
            "opType": 1,
            "equation":
              "derived = userFunctions['Edu2.fun'](obj['hs'], obj['ed'], obj['hdg'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "hs",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you graduated from high school (secondary school)?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "hs1", "displayValue": "Yes" },
                  { "value": "hs2", "displayValue": "No" }
                ]
              },
              {
                "name": "ed",
                "displayName": "",
                "extensions": {
                  "question":
                    "Have you received any other education that can be counted towards a degree, certificate or diploma from an educational institution?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "ed1", "displayValue": "Yes" },
                  { "value": "ed2", "displayValue": "No" }
                ]
              },
              {
                "name": "hdg",
                "displayName": "",
                "extensions": {
                  "question":
                    "What is the highest degree, certificate or diploma you have obtained?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  {
                    "value": "hdg1",
                    "displayValue":
                      "No post-secondary, degree, certificate or diploma "
                  },
                  {
                    "value": "hdg2",
                    "displayValue":
                      "Trade certificate or diploma from a vocational school or apprenticeship training "
                  },
                  {
                    "value": "hdg3",
                    "displayValue":
                      "Non-university certificate or diploma from a community college, CEGEP, school of nursing, etc. "
                  },
                  {
                    "value": "hdg4",
                    "displayValue":
                      "University certificate below bachelor’s level "
                  },
                  { "value": "hdg5", "displayValue": "Bachelor’s degree " },
                  {
                    "value": "hdg6",
                    "displayValue":
                      "University degree or certificate above bachelor’s level "
                  }
                ]
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "Edu1",
            "opType": 1,
            "equation":
              "derived = userFunctions['Edu1.fun'](obj['Edu2'], userFunctions, func);",
            "derivedFrom": ["Edu2"],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "EduHSGrad_cat",
            "opType": "categorical",
            "equation":
              "derived = userFunctions['EduHSGrad_cat.fun'](obj['Edu1'], userFunctions, func);",
            "derivedFrom": ["Edu1"],
            "displayName": "High school ",
            "extensions": {
              "units": "NA",
              "description": "High school graduate- Dummy variable"
            },
            "categories": [
              {
                "value": "1",
                "displayValue": "High school graduate",
                "description": ""
              },
              { "value": "0", "displayValue": "Else", "description": "" }
            ]
          },
          {
            "fieldType": 1,
            "name": "EduNoGrad_cat",
            "opType": "categorical",
            "equation":
              "derived = userFunctions['EduNoGrad_cat.fun'](obj['Edu1'], userFunctions, func);",
            "derivedFrom": ["Edu1"],
            "displayName": "<High school",
            "extensions": {
              "units": "NA",
              "description": "Less than high school education- Dummy variable"
            },
            "categories": [
              {
                "value": "1",
                "displayValue": "Less than high school graduation",
                "description": ""
              },
              { "value": "0", "displayValue": "Else", "description": "" }
            ]
          },
          {
            "fieldType": 1,
            "name": "ImYrAgo",
            "opType": 1,
            "equation":
              "derived = userFunctions['ImYrAgo.fun'](obj['imm'], obj['imyr'], obj['CurrentYear'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "imm",
                "displayName": "",
                "extensions": {
                  "question": "Were you born a Canadian citizen?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "imm1", "displayValue": "Yes" },
                  { "value": "imm2", "displayValue": "No" }
                ]
              },
              {
                "name": "imyr",
                "displayName": "",
                "extensions": {
                  "question":
                    "In what year did you first come to Canada to live?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": null,
                "maxValue": null
              },
              {
                "fieldType": 0,
                "name": "CurrentYear",
                "displayName": "",
                "extensions": {}
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "Immig2",
            "opType": 1,
            "equation":
              "derived = userFunctions['Immig2.fun'](obj['imm'], obj['ImYrAgo'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "imm",
                "displayName": "",
                "extensions": {
                  "question": "Were you born a Canadian citizen?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "imm1", "displayValue": "Yes" },
                  { "value": "imm2", "displayValue": "No" }
                ]
              },
              "ImYrAgo"
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "Immig1",
            "opType": 1,
            "equation":
              "derived = userFunctions['Immig1.fun'](obj['Immig2'], userFunctions, func);",
            "derivedFrom": ["Immig2"],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "Immig0to15_cat",
            "opType": "categorical",
            "equation":
              "derived = userFunctions['Immig0to15_cat.fun'](obj['Immig1'], userFunctions, func);",
            "derivedFrom": ["Immig1"],
            "displayName": "Immigrate <15y",
            "extensions": {
              "units": "NA",
              "description": "Immigrated <15 years- Dummy variable"
            },
            "categories": [
              {
                "value": "1",
                "displayValue": "Immigrated <15 years",
                "description": ""
              },
              { "value": "0", "displayValue": "Else", "description": "" }
            ]
          },
          {
            "fieldType": 1,
            "name": "Immig16to30_cat",
            "opType": "categorical",
            "equation":
              "derived = userFunctions['Immig16to30_cat.fun'](obj['Immig1'], userFunctions, func);",
            "derivedFrom": ["Immig1"],
            "displayName": "Immigrate 15-30y",
            "extensions": {
              "units": "NA",
              "description": "Immigrated 16 to 30 years- Dummy variable"
            },
            "categories": [
              {
                "value": "1",
                "displayValue": "Immigrated 16 to 30 years",
                "description": ""
              },
              { "value": "0", "displayValue": "Else", "description": "" }
            ]
          },
          {
            "fieldType": 1,
            "name": "Immig31to45_cat",
            "opType": "categorical",
            "equation":
              "derived = userFunctions['Immig31to45_cat.fun'](obj['Immig1'], userFunctions, func);",
            "derivedFrom": ["Immig1"],
            "displayName": "Immigrate 31-45y",
            "extensions": {
              "units": "NA",
              "description": "Immigrated 31 to 45 years- Dummy variable"
            },
            "categories": [
              {
                "value": "1",
                "displayValue": "Immigrated 31 to 45 years",
                "description": ""
              },
              { "value": "0", "displayValue": "Else", "description": "" }
            ]
          },
          {
            "fieldType": 1,
            "name": "BMI_cont",
            "opType": 1,
            "equation":
              "derived = userFunctions['BMI_cont.fun'](obj['weightlb'], obj['heightin_hft'], obj['heightin_hin'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "weightlb",
                "displayName": "",
                "extensions": {
                  "question": "How much do you weigh?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 40,
                "maxValue": 575
              },
              {
                "name": "heightin_hft",
                "displayName": "",
                "extensions": {
                  "question": "How tall are you? (Feet (ft))",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              },
              {
                "name": "heightin_hin",
                "displayName": "",
                "extensions": {
                  "question": "How tall are you? (Inches (in))",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "continuous",
                "minValue": 0,
                "maxValue": 0
              }
            ],
            "displayName": "",
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "BMI_spline",
            "opType": "continuous",
            "equation":
              "derived = userFunctions['BMI_spline.fun'](obj['BMI_cont'], userFunctions, func);",
            "derivedFrom": ["BMI_cont"],
            "displayName": "BMI Spline",
            "extensions": {
              "units": "kg/m2",
              "description":
                "Body mass index spline- Units above 35, 0 if 35 or less"
            },
            "minValue": null,
            "maxValue": null
          },
          {
            "fieldType": 1,
            "name": "HeartDis_cat",
            "opType": "categorical",
            "equation":
              "derived = userFunctions['HeartDis_cat.fun'](obj['hd'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "hd",
                "displayName": "",
                "extensions": {
                  "question": "Do you have heart disease?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "hd1", "displayValue": "Yes" },
                  { "value": "hd2", "displayValue": "No" }
                ]
              }
            ],
            "displayName": "Heart disease",
            "extensions": {
              "recommended": "true",
              "units": "NA",
              "description": "Has heart disease- Dummy variable"
            },
            "categories": [
              {
                "value": "1",
                "displayValue": "Has heart disease",
                "description": ""
              },
              {
                "value": "0",
                "displayValue": "Does not have heart disease",
                "description": ""
              }
            ]
          },
          {
            "fieldType": 1,
            "name": "Stroke_cat",
            "opType": "categorical",
            "equation":
              "derived = userFunctions['Stroke_cat.fun'](obj['stk'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "stk",
                "displayName": "",
                "extensions": {
                  "question": "Do you suffer from the effects of a stroke?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "stk1", "displayValue": "Yes" },
                  { "value": "stk2", "displayValue": "No" }
                ]
              }
            ],
            "displayName": "Stroke",
            "extensions": {
              "recommended": "true",
              "units": "NA",
              "description":
                "Suffers from effects of a previous stroke- Dummy variable"
            },
            "categories": [
              {
                "value": "1",
                "displayValue": "Suffers from effects of a previous stroke",
                "description": ""
              },
              {
                "value": "0",
                "displayValue":
                  "Does not suffer from the effects of a previous stroke",
                "description": ""
              }
            ]
          },
          {
            "fieldType": 1,
            "name": "Cancer_cat",
            "opType": "categorical",
            "equation":
              "derived = userFunctions['Cancer_cat.fun'](obj['can'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "can",
                "displayName": "",
                "extensions": {
                  "question": "Do you have cancer?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "can1", "displayValue": "Yes" },
                  { "value": "can2", "displayValue": "No" }
                ]
              }
            ],
            "displayName": "Cancer",
            "extensions": {
              "recommended": "true",
              "units": "NA",
              "description": "Has cancer- Dummy variable"
            },
            "categories": [
              { "value": "1", "displayValue": "Has cancer", "description": "" },
              {
                "value": "0",
                "displayValue": "Does not have cancer",
                "description": ""
              }
            ]
          },
          {
            "fieldType": 1,
            "name": "AgeXCancer_int",
            "opType": 1,
            "equation":
              "derived = userFunctions['Interact.fun'](obj['Cancer_cat'], obj['Age_cont'], userFunctions, func);",
            "derivedFrom": ["Cancer_cat", "Age_cont"],
            "extensions": {}
          },
          {
            "fieldType": 1,
            "name": "Diabetes_cat",
            "opType": "categorical",
            "equation":
              "derived = userFunctions['Diabetes_cat.fun'](obj['diab'], userFunctions, func);",
            "derivedFrom": [
              {
                "name": "diab",
                "displayName": "",
                "extensions": {
                  "question": "Do you have diabetes?",
                  "alternative": "true"
                },
                "fieldType": 0,
                "opType": "categorical",
                "categories": [
                  { "value": "diab1", "displayValue": "Yes" },
                  { "value": "diab2", "displayValue": "No" }
                ]
              }
            ],
            "displayName": "Diabetes",
            "extensions": {
              "recommended": "true",
              "units": "NA",
              "description": "Has diabetes- Dummy variable"
            },
            "categories": [
              {
                "value": "1",
                "displayValue": "Has diabetes",
                "description": ""
              },
              {
                "value": "0",
                "displayValue": "Does not have diabetes",
                "description": ""
              }
            ]
          },
          {
            "fieldType": 1,
            "name": "AgeXDiabetes_int",
            "opType": 1,
            "equation":
              "derived = userFunctions['Interact.fun'](obj['Diabetes_cat'], obj['Age_cont'], userFunctions, func);",
            "derivedFrom": ["Diabetes_cat", "Age_cont"],
            "extensions": {}
          }
        ],
        "userFunctions": {
          "Center.fun":
            "\n        userFunctions[\"Center.fun\"] = (function (uncentered, mean, userFunctions, func) {\n    return func['ifelse2'](func['not'](func['is.na'](uncentered)), uncentered - mean, null);\n})\n    ",
          "Interact.fun":
            "\n        userFunctions[\"Interact.fun\"] = (function (var1, var2, userFunctions, func) {\n    return func['ifelse2'](func['not'](func['is.na'](var1)) && func['not'](func['is.na'](var2)), var1 * var2, null);\n})\n    ",
          "Max.fun":
            "\n        userFunctions[\"Max.fun\"] = (function (var1, max, userFunctions, func) {\n    return func['ifelse2'](var1 > max, max, var1);\n})\n    ",
          "NA0.fun":
            "\n        userFunctions[\"NA0.fun\"] = (function (var1, userFunctions, func) {\n    return func['ifelse2'](func['is.na'](var1), 0, var1);\n})\n    ",
          "CCHS_NA1.fun":
            "\n        userFunctions[\"CCHS_NA1.fun\"] = (function (x, userFunctions, func) {\n    return func['ifelse2'](func['isIn'](x, 6, 7, 8, 9), null, x);\n})\n    ",
          "CCHS_NA2.fun":
            "\n        userFunctions[\"CCHS_NA2.fun\"] = (function (x, userFunctions, func) {\n    return func['ifelse2'](func['isIn'](x, 96, 97, 98, 99), null, x);\n})\n    ",
          "CCHS_NA3.fun":
            "\n        userFunctions[\"CCHS_NA3.fun\"] = (function (x, userFunctions, func) {\n    return func['ifelse2'](func['isIn'](x, 996, 997, 998, 999), null, x);\n})\n    ",
          "CCHS_NA4.fun":
            "\n        userFunctions[\"CCHS_NA4.fun\"] = (function (x, userFunctions, func) {\n    return func['ifelse2'](func['isIn'](x, 9996, 9997, 9998, 9999), null, x);\n})\n    ",
          "falseifNA":
            "\n        userFunctions[\"falseifNA\"] = (function (x, userFunctions, func) {\n    return func['ifelse'](func['is.na'](x), false, x);\n})\n    ",
          "ifelse2":
            "\n        userFunctions[\"ifelse2\"] = (function (x, a, b, userFunctions, func) {\n    return func['ifelse'](userFunctions['falseifNA'](x, userFunctions, func), a, b);\n})\n    ",
          "Age_spline.fun(Age_spline)":
            "\n        userFunctions[\"Age_spline.fun(Age_spline)\"] = (function (Age_cont, point, userFunctions, func) {\n    return func['ifelse2'](Age_cont <= point, 0, func['ifelse2'](Age_cont > point, Age_cont - point, null));\n})\n    ",
          "Age_spline.fun":
            "\n        userFunctions[\"Age_spline.fun\"] = (function (Age_cont, point, userFunctions, func) {\n    return userFunctions['Age_spline.fun(Age_spline)'](Age_cont, point, userFunctions, func);\n})\n    ",
          "DrinksLastWeek.fun":
            "\n        userFunctions[\"DrinksLastWeek.fun\"] = (function (drk_drkm2, drk_drkt2, drk_drkw2, drk_drkr2, drk_drkf2, drk_drksa2, drk_drksu2, dany, userFunctions, func) {\n    return func['ifelse2'](dany == 'dany2', 0, func['ifelse2'](dany == 'dany1', drk_drkm2 + drk_drkt2 + drk_drkw2 + drk_drkr2 + drk_drkf2 + drk_drksa2 + drk_drksu2, null));\n})\n    ",
          "Binge.fun":
            "\n        userFunctions[\"Binge.fun\"] = (function (db, dany, drk_drkm2, drk_drkt2, drk_drkw2, drk_drkr2, drk_drkf2, drk_drksa2, drk_drksu2, userFunctions, func) {\n    return func['ifelse2'](func['isIn'](db, 'db5', 'db6') || drk_drkm2 >= 5 || drk_drkt2 >= 5 || drk_drkw2 >= 5 || drk_drkr2 >= 5 || drk_drkf2 >= 5 || drk_drksa2 >= 5 || drk_drksu2 >= 5, 1, func['ifelse2'](func['isIn'](db, 'db1', 'db2', 'db3', 'db4') && dany == 'dany2' || func['isIn'](db, 'db1', 'db2', 'db3', 'db4') && dany == 'dany1' && (drk_drkm2 < 5 && drk_drkt2 < 5 && drk_drkw2 < 5 && drk_drkr2 < 5 && drk_drkf2 < 5 && drk_drksa2 < 5 && drk_drksu2 < 5), 0, null));\n})\n    ",
          "AlcoholType.fun":
            "\n        userFunctions[\"AlcoholType.fun\"] = (function (Binge, dany, DrinksLastWeek_cont, cut1, cut2, userFunctions, func) {\n    return func['ifelse2'](Binge == 1, 2, func['ifelse2'](dany == 'dany2' || dany == 'dany1' && DrinksLastWeek_cont <= cut1, 0, func['ifelse2'](dany == 'dany1' && DrinksLastWeek_cont > cut1 && DrinksLastWeek_cont <= cut2, 1, func['ifelse2'](dany == 'dany1' && DrinksLastWeek_cont > cut2, 2, null))));\n})\n    ",
          "AlcoholMod_cat.fun":
            "\n        userFunctions[\"AlcoholMod_cat.fun\"] = (function (AlcoholType, userFunctions, func) {\n    return func['ifelse'](AlcoholType == 1, 1, func['ifelse'](func['isIn'](AlcoholType, 0, 2), 0, null));\n})\n    ",
          "AlcoholHeavy_cat.fun":
            "\n        userFunctions[\"AlcoholHeavy_cat.fun\"] = (function (AlcoholType, userFunctions, func) {\n    return func['ifelse'](AlcoholType == 2, 1, func['ifelse'](func['isIn'](AlcoholType, 0, 1), 0, null));\n})\n    ",
          "QuitTime.fun":
            "\n        userFunctions[\"QuitTime.fun\"] = (function (stpn, stpny, userFunctions, func) {\n    return func['ifelse2'](stpn == 'stpn1', 0, func['ifelse2'](stpn == 'stpn2', 1, func['ifelse2'](stpn == 'stpn3', 2, func['ifelse2'](stpn == 'stpn4', stpny, null))));\n})\n    ",
          "TypeOfSmoker.fun":
            "\n        userFunctions[\"TypeOfSmoker.fun\"] = (function (smk, evd, s100, cigdayf, cigdayd, userFunctions, func) {\n    return func['ifelse2'](smk == 'smk3' && evd == 'evd2' && s100 == 's1002', 0, func['ifelse2'](smk == 'smk3' && evd == 'evd1' && cigdayf < 20 || smk == 'smk3' && evd == 'evd2' && s100 == 's1001', 1, func['ifelse2'](smk == 'smk3' && evd == 'evd1' && cigdayf >= 20, 2, func['ifelse2'](smk == 'smk1' && cigdayd < 20 || smk == 'smk2', 3, func['ifelse2'](smk == 'smk1' && cigdayd >= 20, 4, null)))));\n})\n    ",
          "QSLightCont_df1.fun":
            "\n        userFunctions[\"QSLightCont_df1.fun\"] = (function (TypeOfSmoker, QuitTime, sigma, userFunctions, func) {\n    return func['ifelse2'](func['isIn'](TypeOfSmoker, 0, 2, 4), 0, func['ifelse2'](TypeOfSmoker == 1, func['exp'](-QuitTime / sigma), func['ifelse2'](TypeOfSmoker == 3, 1, null)));\n})\n    ",
          "QSLightCont_df2.fun":
            "\n        userFunctions[\"QSLightCont_df2.fun\"] = (function (SmokeDaily, DailyCig, Age_cont, AgeDailyQuit, sigma, userFunctions, func) {\n    return func['ifelse2'](SmokeDaily == 0, 0, func['ifelse2'](SmokeDaily == 1 && DailyCig < 20, 1, func['ifelse2'](SmokeDaily == 2 && DailyCig < 20, func['exp'](-(Age_cont - AgeDailyQuit) / sigma), func['ifelse2'](func['isIn'](SmokeDaily, 1, 2) && DailyCig >= 20, 0, null))));\n})\n    ",
          "QSHeavyCont_df1.fun":
            "\n        userFunctions[\"QSHeavyCont_df1.fun\"] = (function (TypeOfSmoker, QuitTime, sigma, userFunctions, func) {\n    return func['ifelse2'](func['isIn'](TypeOfSmoker, 0, 1, 3), 0, func['ifelse2'](TypeOfSmoker == 2, func['exp'](-QuitTime / sigma), func['ifelse2'](TypeOfSmoker == 4, 1, null)));\n})\n    ",
          "QSHeavyCont_df2.fun":
            "\n        userFunctions[\"QSHeavyCont_df2.fun\"] = (function (SmokeDaily, DailyCig, Age_cont, AgeDailyQuit, sigma, userFunctions, func) {\n    return func['ifelse2'](SmokeDaily == 0, 0, func['ifelse2'](SmokeDaily == 1 && DailyCig >= 20, 1, func['ifelse2'](SmokeDaily == 2 && DailyCig >= 20, func['exp'](-(Age_cont - AgeDailyQuit) / sigma), func['ifelse2'](func['isIn'](SmokeDaily, 1, 2) && DailyCig < 20, 0, null))));\n})\n    ",
          "TypeOfSmoker2.fun":
            "\n        userFunctions[\"TypeOfSmoker2.fun\"] = (function (smk, evd, s100, wcig, userFunctions, func) {\n    return func['ifelse2'](wcig == 'wcig2', 6, func['ifelse2'](smk == 'smk1', 1, func['ifelse2'](smk == 'smk2' && evd == 'evd1', 2, func['ifelse2'](smk == 'smk2' && evd == 'evd2', 3, func['ifelse2'](smk == 'smk3' && evd == 'evd1', 4, func['ifelse2'](smk == 'smk3' && evd == 'evd2' && s100 == 's1001', 5, func['ifelse2'](smk == 'smk3' && evd == 'evd2' && s100 == 's1002', 6, null)))))));\n})\n    ",
          "tsq_ds.fun":
            "\n        userFunctions[\"tsq_ds.fun\"] = (function (stpo, stpoy, userFunctions, func) {\n    return func['ifelse'](stpo == 'stpo1', 0.5, func['ifelse'](stpo == 'stpo2', 1.5, func['ifelse'](stpo == 'stpo3', 2.5, func['ifelse'](stpo == 'stpo4', stpoy, null))));\n})\n    ",
          "PackYears1.fun":
            "\n        userFunctions[\"PackYears1.fun\"] = (function (TypeOfSmoker2, Age_cont, agecigd, cigdayd, tsq_ds, cigdayf, cigdayo, dayocc, agec1, s100, userFunctions, func) {\n    return func['ifelse2'](TypeOfSmoker2 == 1, func['pmax']((Age_cont - agecigd) * (cigdayd / 20), 0.0137), func['ifelse2'](TypeOfSmoker2 == 2, func['pmax']((Age_cont - agecigd - tsq_ds) * (cigdayf / 20), 0.0137) + func['pmax'](cigdayo * dayocc / 30, 1) * tsq_ds, func['ifelse2'](TypeOfSmoker2 == 3, func['pmax'](cigdayo * dayocc / 30, 1) / 20 * (Age_cont - agec1), func['ifelse2'](TypeOfSmoker2 == 4, func['pmax']((Age_cont - agecigd - tsq_ds) * (cigdayf / 20), 0.0137), func['ifelse2'](TypeOfSmoker2 == 5 && s100 == 's1001', 0.0137, func['ifelse2'](TypeOfSmoker2 == 5 && s100 == 's1002', 0.007, func['ifelse2'](TypeOfSmoker2 == 6, 0, null)))))));\n})\n    ",
          "PackYears2.fun":
            "\n        userFunctions[\"PackYears2.fun\"] = (function (SmokeDaily, Age_cont, AgeDailyStart, DailyCig, AgeDailyQuit, userFunctions, func) {\n    return func['ifelse2'](SmokeDaily == 0, 0, func['ifelse2'](SmokeDaily == 1, (Age_cont - AgeDailyStart) * (DailyCig / 20), func['ifelse2'](SmokeDaily == 2, (AgeDailyQuit - AgeDailyStart) * (DailyCig / 20), null)));\n})\n    ",
          "smoker.fun(smoker)":
            "\n        userFunctions[\"smoker.fun(smoker)\"] = (function (TypeOfSmoker2, userFunctions, func) {\n    return func['ifelse'](func['isIn'](TypeOfSmoker2, 1, 2, 3), 1, func['ifelse'](func['isIn'](TypeOfSmoker2, 4, 5, 6), 0, null));\n})\n    ",
          "smoker.fun":
            "\n        userFunctions[\"smoker.fun\"] = (function (TypeOfSmoker2, userFunctions, func) {\n    return userFunctions['smoker.fun(smoker)'](TypeOfSmoker2, userFunctions, func);\n})\n    ",
          "eversmoker.fun(eversmoker)":
            "\n        userFunctions[\"eversmoker.fun(eversmoker)\"] = (function (TypeOfSmoker2, userFunctions, func) {\n    return func['ifelse'](func['isIn'](TypeOfSmoker2, 1, 2, 3, 4, 5), 1, func['ifelse'](TypeOfSmoker2 == 6, 0, null));\n})\n    ",
          "eversmoker.fun":
            "\n        userFunctions[\"eversmoker.fun\"] = (function (TypeOfSmoker2, userFunctions, func) {\n    return userFunctions['eversmoker.fun(eversmoker)'](TypeOfSmoker2, userFunctions, func);\n})\n    ",
          "SmokeSimple1.fun(SmokeSimple)":
            "\n        userFunctions[\"SmokeSimple1.fun(SmokeSimple)\"] = (function (smoker, eversmoker, tsq_ds, TypeOfSmoker2, userFunctions, func) {\n    return func['ifelse2'](smoker == 0 && eversmoker == 0, 0, func['ifelse2'](smoker == 1 && eversmoker == 1, 1, func['ifelse2'](smoker == 0 && eversmoker == 1 && tsq_ds < 5 || TypeOfSmoker2 == 5, 2, func['ifelse2'](smoker == 0 && eversmoker == 1 && tsq_ds >= 5, 3, null))));\n})\n    ",
          "SmokeSimple1.fun":
            "\n        userFunctions[\"SmokeSimple1.fun\"] = (function (smoker, eversmoker, tsq_ds, TypeOfSmoker2, userFunctions, func) {\n    return userFunctions['SmokeSimple1.fun(SmokeSimple)'](smoker, eversmoker, tsq_ds, TypeOfSmoker2, userFunctions, func);\n})\n    ",
          "SmokeSimple2.fun(SmokeSimple)":
            "\n        userFunctions[\"SmokeSimple2.fun(SmokeSimple)\"] = (function (SmokeDaily, Age_cont, AgeDailyQuit, userFunctions, func) {\n    return func['ifelse2'](SmokeDaily == 0, 0, func['ifelse2'](SmokeDaily == 1, 1, func['ifelse2'](SmokeDaily == 2 && Age_cont < AgeDailyQuit + 5, 2, func['ifelse2'](SmokeDaily == 2 && Age_cont > AgeDailyQuit + 5, 3, null))));\n})\n    ",
          "SmokeSimple2.fun":
            "\n        userFunctions[\"SmokeSimple2.fun\"] = (function (SmokeDaily, Age_cont, AgeDailyQuit, userFunctions, func) {\n    return userFunctions['SmokeSimple2.fun(SmokeSimple)'](SmokeDaily, Age_cont, AgeDailyQuit, userFunctions, func);\n})\n    ",
          "dfruit.fun":
            "\n        userFunctions[\"dfruit.fun\"] = (function (frt, frtu, userFunctions, func) {\n    return func['ifelse'](func['is.na'](frt), null, func['ifelse'](frtu == 'frtd', frt, func['ifelse'](frtu == 'frtw', frt / 7, func['ifelse'](frtu == 'frtm', frt / 30, func['ifelse'](frtu == 'frty', frt / 365, null)))));\n})\n    ",
          "dsalad.fun":
            "\n        userFunctions[\"dsalad.fun\"] = (function (sal, salu, userFunctions, func) {\n    return func['ifelse'](func['is.na'](sal), null, func['ifelse'](salu == 'sald', sal, func['ifelse'](salu == 'salw', sal / 7, func['ifelse'](salu == 'salm', sal / 30, func['ifelse'](salu == 'saly', sal / 365, null)))));\n})\n    ",
          "dpotato.fun":
            "\n        userFunctions[\"dpotato.fun\"] = (function (pot, potu, userFunctions, func) {\n    return func['ifelse'](func['is.na'](pot), null, func['ifelse'](potu == 'potd', pot, func['ifelse'](potu == 'potw', pot / 7, func['ifelse'](potu == 'potm', pot / 30, func['ifelse'](potu == 'poty', pot / 365, null)))));\n})\n    ",
          "dcarrot.fun":
            "\n        userFunctions[\"dcarrot.fun\"] = (function (car, caru, userFunctions, func) {\n    return func['ifelse'](func['is.na'](car), null, func['ifelse'](caru == 'card', car, func['ifelse'](caru == 'carw', car / 7, func['ifelse'](caru == 'carm', car / 30, func['ifelse'](caru == 'cary', car / 365, null)))));\n})\n    ",
          "dveg.fun":
            "\n        userFunctions[\"dveg.fun\"] = (function (veg, vegu, userFunctions, func) {\n    return func['ifelse'](func['is.na'](veg), null, func['ifelse'](vegu == 'vegd', veg, func['ifelse'](vegu == 'vegw', veg / 7, func['ifelse'](vegu == 'vegm', veg / 30, func['ifelse'](vegu == 'vegy', veg / 365, null)))));\n})\n    ",
          "djuice.fun":
            "\n        userFunctions[\"djuice.fun\"] = (function (jui, juiu, userFunctions, func) {\n    return func['ifelse'](func['is.na'](jui), null, func['ifelse'](juiu == 'juid', jui, func['ifelse'](juiu == 'juiw', jui / 7, func['ifelse'](juiu == 'juim', jui / 30, func['ifelse'](juiu == 'juiy', jui / 365, null)))));\n})\n    ",
          "FruitVeg.fun":
            "\n        userFunctions[\"FruitVeg.fun\"] = (function (dfruit, dsalad, dpotato, dcarrot, dveg, userFunctions, func) {\n    return func['ifelse2'](func['not'](func['is.na'](dfruit)) && func['not'](func['is.na'](dsalad)) && func['not'](func['is.na'](dpotato)) && func['not'](func['is.na'](dcarrot)) && func['not'](func['is.na'](dveg)), dfruit + dsalad + dpotato + dcarrot + dveg, null);\n})\n    ",
          "FruitVeg8Max.fun":
            "\n        userFunctions[\"FruitVeg8Max.fun\"] = (function (FruitVeg, userFunctions, func) {\n    return func['ifelse2'](FruitVeg > 8, 8, func['ifelse2'](func['not'](func['is.na'](FruitVeg)), FruitVeg, null));\n})\n    ",
          "HighPotatoFlag.fun":
            "\n        userFunctions[\"HighPotatoFlag.fun\"] = (function (dpotato, userFunctions, func) {\n    return func['ifelse2'](dpotato >= 1, 1, func['ifelse2'](func['not'](func['is.na'](dpotato)), 0, null));\n})\n    ",
          "NoCarrotFlag.fun":
            "\n        userFunctions[\"NoCarrotFlag.fun\"] = (function (dcarrot, userFunctions, func) {\n    return func['ifelse2'](dcarrot == 0, 1, func['ifelse2'](func['not'](func['is.na'](dcarrot)), 0, null));\n})\n    ",
          "HighJuice.fun":
            "\n        userFunctions[\"HighJuice.fun\"] = (function (djuice, userFunctions, func) {\n    return func['ifelse2'](djuice <= 0, 0, func['ifelse2'](djuice == 1, 0, func['ifelse2'](func['not'](func['is.na'](djuice)), djuice - 1, null)));\n})\n    ",
          "DietScore.fun":
            "\n        userFunctions[\"DietScore.fun\"] = (function (FruitVeg8Max, HighPotatoFlag, NoCarrotFlag, HighJuice, userFunctions, func) {\n    return func['ifelse2'](func['not'](func['is.na'](FruitVeg8Max)) && func['not'](func['is.na'](HighPotatoFlag)) && func['not'](func['is.na'](NoCarrotFlag)) && func['not'](func['is.na'](HighJuice)), 2 + FruitVeg8Max - 2 * HighPotatoFlag - 2 * NoCarrotFlag - 2 * HighJuice, null);\n})\n    ",
          "DietScore_cont.fun":
            "\n        userFunctions[\"DietScore_cont.fun\"] = (function (DietScore, userFunctions, func) {\n    return func['ifelse2'](DietScore < 0, 0, func['ifelse2'](DietScore > 10, 10, func['ifelse2'](func['not'](func['is.na'](DietScore)), DietScore, null)));\n})\n    ",
          "diet_num.fun":
            "\n        userFunctions[\"diet_num.fun\"] = (function (day, week, month, year, userFunctions, func) {\n    return func['ifelse2'](func['not'](func['is.na'](day)), day, func['ifelse2'](func['not'](func['is.na'](week)), week, func['ifelse2'](func['not'](func['is.na'](month)), month, func['ifelse2'](func['not'](func['is.na'](year)), year, 0))));\n})\n    ",
          "Activity.fun":
            "\n        userFunctions[\"Activity.fun\"] = (function (lpa, lpam, lpat, userFunctions, func) {\n    return func['ifelse2'](lpa == 'Yes' && lpam == 'lpa15', lpat * 0.2167 / 3, func['ifelse2'](lpa == 'Yes' && lpam == 'lpa30', lpat * 0.3833 / 3, func['ifelse2'](lpa == 'Yes' && lpam == 'lpa60', lpat * 0.75 / 3, func['ifelse2'](lpa == 'Yes' && lpam == 'lpa61', lpat * 1 / 3, 0))));\n})\n    ",
          "PhysicalActivity.fun(noactivity)":
            "\n        userFunctions[\"PhysicalActivity.fun(noactivity)\"] = (function (lpa_lpa0, walk, garden, swim, bike, dance, hexercises, hockey, skate, inline, jogrun, golf, aerobics, ski, bowl, baseball, tennis, weights, fishing, volleyball, basketball, soccer, other, userFunctions, func) {\n    return func['ifelse2'](lpa_lpa0 == 'Yes' && walk == 0 && garden == 0 && swim == 0 && bike == 0 && dance == 0 && hexercises == 0 && hockey == 0 && skate == 0 && inline == 0 && jogrun == 0 && golf == 0 && aerobics == 0 && ski == 0 && bowl == 0 && baseball == 0 && tennis == 0 && weights == 0 && fishing == 0 && volleyball == 0 && basketball == 0 && soccer == 0 && other == 0, 1, func['ifelse2'](func['is.na'](lpa_lpa0) && walk == 0 && garden == 0 && swim == 0 && bike == 0 && dance == 0 && hexercises == 0 && hockey == 0 && skate == 0 && inline == 0 && jogrun == 0 && golf == 0 && aerobics == 0 && ski == 0 && bowl == 0 && baseball == 0 && tennis == 0 && weights == 0 && fishing == 0 && volleyball == 0 && basketball == 0 && soccer == 0 && other == 0, null, 0));\n})\n    ",
          "PhysicalActivity.fun(PhysicalActivity)":
            "\n        userFunctions[\"PhysicalActivity.fun(PhysicalActivity)\"] = (function (lpa_lpa0, walk, garden, swim, bike, dance, hexercises, hockey, skate, inline, jogrun, golf, aerobics, ski, bowl, baseball, tennis, weights, fishing, volleyball, basketball, soccer, other, userFunctions, func) {\n    return func['ifelse2'](func['is.na'](userFunctions['PhysicalActivity.fun(noactivity)'](lpa_lpa0, walk, garden, swim, bike, dance, hexercises, hockey, skate, inline, jogrun, golf, aerobics, ski, bowl, baseball, tennis, weights, fishing, volleyball, basketball, soccer, other, userFunctions, func)), null, func['ifelse2'](userFunctions['PhysicalActivity.fun(noactivity)'](lpa_lpa0, walk, garden, swim, bike, dance, hexercises, hockey, skate, inline, jogrun, golf, aerobics, ski, bowl, baseball, tennis, weights, fishing, volleyball, basketball, soccer, other, userFunctions, func) == 1, 0, func['ifelse2'](3 * walk / 30 + 3 * garden / 30 + 3 * swim / 30 + 4 * bike / 30 + 3 * dance / 30 + 3 * hexercises / 30 + 6 * hockey / 30 + 4 * skate / 30 + 5 * inline / 30 + 9.5 * jogrun / 30 + 4 * golf / 30 + 4 * aerobics / 30 + 4 * ski / 30 + 2 * bowl / 30 + 3 * baseball / 30 + 4 * tennis / 30 + 3 * weights / 30 + 3 * fishing / 30 + 5 * volleyball / 30 + 6 * basketball / 30 + 5 * soccer / 30 + 4 * other / 30 > 10, 10, 3 * walk / 30 + 3 * garden / 30 + 3 * swim / 30 + 4 * bike / 30 + 3 * dance / 30 + 3 * hexercises / 30 + 6 * hockey / 30 + 4 * skate / 30 + 5 * inline / 30 + 9.5 * jogrun / 30 + 4 * golf / 30 + 4 * aerobics / 30 + 4 * ski / 30 + 2 * bowl / 30 + 3 * baseball / 30 + 4 * tennis / 30 + 3 * weights / 30 + 3 * fishing / 30 + 5 * volleyball / 30 + 6 * basketball / 30 + 5 * soccer / 30 + 4 * other / 30)));\n})\n    ",
          "PhysicalActivity.fun":
            "\n        userFunctions[\"PhysicalActivity.fun\"] = (function (lpa_lpa0, walk, garden, swim, bike, dance, hexercises, hockey, skate, inline, jogrun, golf, aerobics, ski, bowl, baseball, tennis, weights, fishing, volleyball, basketball, soccer, other, userFunctions, func) {\n    return userFunctions['PhysicalActivity.fun(PhysicalActivity)'](lpa_lpa0, walk, garden, swim, bike, dance, hexercises, hockey, skate, inline, jogrun, golf, aerobics, ski, bowl, baseball, tennis, weights, fishing, volleyball, basketball, soccer, other, userFunctions, func);\n})\n    ",
          "PhysicalActivityLog_cont.fun(PhysicalActivity_cont)":
            "\n        userFunctions[\"PhysicalActivityLog_cont.fun(PhysicalActivity_cont)\"] = (function (PhysicalActivity, userFunctions, func) {\n    return func['ifelse2'](func['not'](func['is.na'](PhysicalActivity)), func['log'](1 + PhysicalActivity) / func['log'](10), null);\n})\n    ",
          "PhysicalActivityLog_cont.fun":
            "\n        userFunctions[\"PhysicalActivityLog_cont.fun\"] = (function (PhysicalActivity, userFunctions, func) {\n    return userFunctions['PhysicalActivityLog_cont.fun(PhysicalActivity_cont)'](PhysicalActivity, userFunctions, func);\n})\n    ",
          "DepInd.fun":
            "\n        userFunctions[\"DepInd.fun\"] = (function (dep, userFunctions, func) {\n    return func['ifelse'](dep == 'dep1', 0, func['ifelse'](dep == 'dep2', 1, func['ifelse'](dep == 'dep3', 2, null)));\n})\n    ",
          "DepIndHigh_cat.fun":
            "\n        userFunctions[\"DepIndHigh_cat.fun\"] = (function (DepInd, userFunctions, func) {\n    return func['ifelse'](DepInd == 2, 1, func['ifelse'](func['isIn'](DepInd, 0, 1), 0, null));\n})\n    ",
          "DepIndMod_cat.fun":
            "\n        userFunctions[\"DepIndMod_cat.fun\"] = (function (DepInd, userFunctions, func) {\n    return func['ifelse'](DepInd == 1, 1, func['ifelse'](func['isIn'](DepInd, 0, 2), 0, null));\n})\n    ",
          "Edu2.fun":
            "\n        userFunctions[\"Edu2.fun\"] = (function (hs, ed, hdg, userFunctions, func) {\n    return func['ifelse2'](hs == 'hs2', 0, func['ifelse2'](hs == 'hs1' && ed == 'ed2', 1, func['ifelse2'](hs == 'hs1' && ed == 'ed1' && hdg == 'hdg1', 2, func['ifelse2'](hs == 'hs1' && ed == 'ed1' && func['isIn'](hdg, 'hdg2', 'hdg3', 'hdg4', 'hdg5', 'hdg6'), 3, null))));\n})\n    ",
          "EduHSGrad2_cat.fun":
            "\n        userFunctions[\"EduHSGrad2_cat.fun\"] = (function (Edu2, userFunctions, func) {\n    return func['ifelse'](Edu2 == 1, 1, func['ifelse'](func['isIn'](Edu2, 0, 2, 3), 0, null));\n})\n    ",
          "EduSomePS2_cat.fun":
            "\n        userFunctions[\"EduSomePS2_cat.fun\"] = (function (Edu2, userFunctions, func) {\n    return func['ifelse'](Edu2 == 2, 1, func['ifelse'](func['isIn'](Edu2, 0, 1, 3), 0, null));\n})\n    ",
          "EduPSGrad2_cat.fun":
            "\n        userFunctions[\"EduPSGrad2_cat.fun\"] = (function (Edu2, userFunctions, func) {\n    return func['ifelse'](Edu2 == 3, 1, func['ifelse'](func['isIn'](Edu2, 0, 1, 2), 0, null));\n})\n    ",
          "Edu1.fun":
            "\n        userFunctions[\"Edu1.fun\"] = (function (Edu2, userFunctions, func) {\n    return func['ifelse'](Edu2 == 0, 2, func['ifelse'](Edu2 == 1, 1, func['ifelse'](func['isIn'](Edu2, 2, 3), 0, null)));\n})\n    ",
          "EduHSGrad_cat.fun":
            "\n        userFunctions[\"EduHSGrad_cat.fun\"] = (function (Edu1, userFunctions, func) {\n    return func['ifelse'](Edu1 == 1, 1, func['ifelse'](func['isIn'](Edu1, 0, 2), 0, null));\n})\n    ",
          "EduNoGrad_cat.fun":
            "\n        userFunctions[\"EduNoGrad_cat.fun\"] = (function (Edu1, userFunctions, func) {\n    return func['ifelse'](Edu1 == 2, 1, func['ifelse'](func['isIn'](Edu1, 0, 1), 0, null));\n})\n    ",
          "ImYrAgo.fun(ImYrAgo)":
            "\n        userFunctions[\"ImYrAgo.fun(ImYrAgo)\"] = (function (imm, imyr, CurrentYear, userFunctions, func) {\n    return func['ifelse2'](func['is.na'](imm) || imm == 'imm2' && func['is.na'](imyr) || imm == 'imm1', null, CurrentYear - imyr);\n})\n    ",
          "ImYrAgo.fun":
            "\n        userFunctions[\"ImYrAgo.fun\"] = (function (imm, imyr, CurrentYear, userFunctions, func) {\n    return userFunctions['ImYrAgo.fun(ImYrAgo)'](imm, imyr, CurrentYear, userFunctions, func);\n})\n    ",
          "Immig2.fun(Immig2)":
            "\n        userFunctions[\"Immig2.fun(Immig2)\"] = (function (imm, ImYrAgo, userFunctions, func) {\n    return func['ifelse2'](imm == 'imm1', 0, func['ifelse2'](imm == 'imm2' && ImYrAgo >= 0 && ImYrAgo <= 15, 1, func['ifelse2'](imm == 'imm2' && ImYrAgo > 15 && ImYrAgo <= 30, 2, func['ifelse2'](imm == 'imm2' && ImYrAgo > 30 && ImYrAgo <= 45, 3, func['ifelse2'](imm == 'imm2' && ImYrAgo > 45, 4, null)))));\n})\n    ",
          "Immig2.fun":
            "\n        userFunctions[\"Immig2.fun\"] = (function (imm, ImYrAgo, userFunctions, func) {\n    return userFunctions['Immig2.fun(Immig2)'](imm, ImYrAgo, userFunctions, func);\n})\n    ",
          "Immig1.fun(Immig1)":
            "\n        userFunctions[\"Immig1.fun(Immig1)\"] = (function (Immig2, userFunctions, func) {\n    return func['ifelse'](func['isIn'](Immig2, 0, 4), 0, func['ifelse'](Immig2 == 1, 1, func['ifelse'](Immig2 == 2, 2, func['ifelse'](Immig2 == 3, 3, null))));\n})\n    ",
          "Immig1.fun":
            "\n        userFunctions[\"Immig1.fun\"] = (function (Immig2, userFunctions, func) {\n    return userFunctions['Immig1.fun(Immig1)'](Immig2, userFunctions, func);\n})\n    ",
          "Immig0to15_cat.fun(Immig0to15_cat)":
            "\n        userFunctions[\"Immig0to15_cat.fun(Immig0to15_cat)\"] = (function (Immig1, userFunctions, func) {\n    return func['ifelse'](Immig1 == 1, 1, func['ifelse'](func['isIn'](Immig1, 0, 2, 3), 0, null));\n})\n    ",
          "Immig0to15_cat.fun":
            "\n        userFunctions[\"Immig0to15_cat.fun\"] = (function (Immig1, userFunctions, func) {\n    return userFunctions['Immig0to15_cat.fun(Immig0to15_cat)'](Immig1, userFunctions, func);\n})\n    ",
          "Immig16to30_cat.fun(Immig16to30_cat)":
            "\n        userFunctions[\"Immig16to30_cat.fun(Immig16to30_cat)\"] = (function (Immig1, userFunctions, func) {\n    return func['ifelse'](Immig1 == 2, 1, func['ifelse'](func['isIn'](Immig1, 0, 1, 3), 0, null));\n})\n    ",
          "Immig16to30_cat.fun":
            "\n        userFunctions[\"Immig16to30_cat.fun\"] = (function (Immig1, userFunctions, func) {\n    return userFunctions['Immig16to30_cat.fun(Immig16to30_cat)'](Immig1, userFunctions, func);\n})\n    ",
          "Immig31to45_cat.fun(Immig31to45_cat)":
            "\n        userFunctions[\"Immig31to45_cat.fun(Immig31to45_cat)\"] = (function (Immig1, userFunctions, func) {\n    return func['ifelse'](Immig1 == 3, 1, func['ifelse'](func['isIn'](Immig1, 0, 1, 2), 0, null));\n})\n    ",
          "Immig31to45_cat.fun":
            "\n        userFunctions[\"Immig31to45_cat.fun\"] = (function (Immig1, userFunctions, func) {\n    return userFunctions['Immig31to45_cat.fun(Immig31to45_cat)'](Immig1, userFunctions, func);\n})\n    ",
          "BMI_cont.fun(weightkg)":
            "\n        userFunctions[\"BMI_cont.fun(weightkg)\"] = (function (weightlb, heightin_hft, heightin_hin, userFunctions, func) {\n    return func['ifelse2'](func['not'](func['is.na'](weightlb)), weightlb / 2.2046226218, null);\n})\n    ",
          "BMI_cont.fun(heightm)":
            "\n        userFunctions[\"BMI_cont.fun(heightm)\"] = (function (weightlb, heightin_hft, heightin_hin, userFunctions, func) {\n    return func['ifelse2'](func['not'](func['is.na'](heightin_hft)) && func['not'](func['is.na'](heightin_hin)), (heightin_hft * 12 + heightin_hin) / 39.3701, null);\n})\n    ",
          "BMI_cont.fun":
            "\n        userFunctions[\"BMI_cont.fun\"] = (function (weightlb, heightin_hft, heightin_hin, userFunctions, func) {\n    return func['ifelse2'](func['not'](func['is.na'](userFunctions['BMI_cont.fun(weightkg)'](weightlb, heightin_hft, heightin_hin, userFunctions, func))) && func['not'](func['is.na'](userFunctions['BMI_cont.fun(heightm)'](weightlb, heightin_hft, heightin_hin, userFunctions, func))), userFunctions['BMI_cont.fun(weightkg)'](weightlb, heightin_hft, heightin_hin, userFunctions, func) / (userFunctions['BMI_cont.fun(heightm)'](weightlb, heightin_hft, heightin_hin, userFunctions, func) * userFunctions['BMI_cont.fun(heightm)'](weightlb, heightin_hft, heightin_hin, userFunctions, func)), null);\n})\n    ",
          "BMI_spline.fun":
            "\n        userFunctions[\"BMI_spline.fun\"] = (function (BMI_cont, userFunctions, func) {\n    return func['ifelse2'](BMI_cont - 35 > 0, BMI_cont - 35, func['ifelse2'](BMI_cont - 35 <= 0, 0, null));\n})\n    ",
          "HeartDis_cat.fun":
            "\n        userFunctions[\"HeartDis_cat.fun\"] = (function (hd, userFunctions, func) {\n    return func['ifelse'](hd == 'hd1', 1, func['ifelse'](hd == 'hd2', 0, null));\n})\n    ",
          "Stroke_cat.fun":
            "\n        userFunctions[\"Stroke_cat.fun\"] = (function (stk, userFunctions, func) {\n    return func['ifelse'](stk == 'stk1', 1, func['ifelse'](stk == 'stk2', 0, null));\n})\n    ",
          "Cancer_cat.fun":
            "\n        userFunctions[\"Cancer_cat.fun\"] = (function (can, userFunctions, func) {\n    return func['ifelse'](can == 'can1', 1, func['ifelse'](can == 'can2', 0, null));\n})\n    ",
          "Diabetes_cat.fun":
            "\n        userFunctions[\"Diabetes_cat.fun\"] = (function (diab, userFunctions, func) {\n    return func['ifelse'](diab == 'diab1', 1, func['ifelse'](diab == 'diab2', 0, null));\n})\n    ",
          "Hypertension_cat.fun":
            "\n        userFunctions[\"Hypertension_cat.fun\"] = (function (bp, userFunctions, func) {\n    return func['ifelse'](bp == 'bp1', 1, func['ifelse'](bp == 'bp2', 0, null));\n})\n    "
        },
        "tables": {},
        "baseline": 0.0000238108,
        "covariates": [
          {
            "name": "Age_cont",
            "extensions": {},
            "fieldType": 2,
            "beta": 0.0891888015031822,
            "referencePoint": 54.1488503875064
          },
          {
            "name": "Age_spline",
            "extensions": {},
            "fieldType": 2,
            "beta": 0.0292179374194524,
            "referencePoint": 0.425166096111415
          },
          {
            "name": "QSLightCont_df",
            "displayName": "Light smoker",
            "extensions": {
              "units": "NA",
              "description":
                "Time-varying function for current light and former light smoker"
            },
            "fieldType": 2,
            "opType": "continuous",
            "minValue": 0,
            "maxValue": 1,
            "beta": 0.806847255361553,
            "referencePoint": 0.254288098778076
          },
          {
            "name": "QSHeavyCont_df",
            "displayName": "Heavy smoker",
            "extensions": {
              "units": "NA",
              "description":
                "Time-varying function for current heavy and former heavy smoker"
            },
            "fieldType": 2,
            "opType": "continuous",
            "minValue": 0,
            "maxValue": 1,
            "beta": 1.18030397927685,
            "referencePoint": 0.106537866589885
          },
          {
            "name": "PhysicalActivityLog_cont",
            "extensions": {},
            "fieldType": 2,
            "beta": -0.928355359618802,
            "referencePoint": 0.384627883292789
          },
          {
            "name": "DietScore_cont",
            "displayName": "Diet",
            "extensions": { "units": "NA", "description": "Final diet score" },
            "fieldType": 2,
            "opType": "continuous",
            "minValue": 0,
            "maxValue": 10,
            "beta": -0.0436711994153916,
            "referencePoint": 5.49853294572499
          },
          {
            "name": "BMI_spline",
            "displayName": "BMI Spline",
            "extensions": {
              "units": "kg/m2",
              "description":
                "Body mass index spline- Units above 35, 0 if 35 or less"
            },
            "fieldType": 2,
            "opType": "continuous",
            "minValue": null,
            "maxValue": null,
            "beta": 0.0240673793676962,
            "referencePoint": 0.286680013767083
          },
          {
            "name": "AgeXCancer_int",
            "extensions": {},
            "fieldType": 3,
            "beta": -0.0525599675753628,
            "referencePoint": 1.45539528108809
          },
          {
            "name": "AgeXDiabetes_int",
            "extensions": {},
            "fieldType": 3,
            "beta": -0.00942704419043476,
            "referencePoint": 4.19181719286816
          },
          {
            "name": "AlcoholHeavy_cat",
            "displayName": "Heavy alcohol",
            "extensions": {
              "units": "NA",
              "description": "Heavy drinker- Dummy variable"
            },
            "fieldType": 2,
            "opType": "categorical",
            "categories": [
              {
                "value": "1",
                "displayValue": "Heavy drinker",
                "description":
                  "Males: >21 drinks/week; Females: >14 drinks/week"
              },
              { "value": "0", "displayValue": "Else", "description": "Else" }
            ],
            "beta": 0.0797049709902844,
            "referencePoint": 0.0684543381661514
          },
          {
            "name": "AlcoholMod_cat",
            "displayName": "Mod. alcohol",
            "extensions": {
              "units": "NA",
              "description": "Moderate drinker- Dummy variable"
            },
            "fieldType": 2,
            "opType": "categorical",
            "categories": [
              {
                "value": "1",
                "displayValue": "Moderate drinker",
                "description":
                  "Males: 4-21 drinks/week; Females: 3 to 14 drinks/week"
              },
              { "value": "0", "displayValue": "Else", "description": "Else" }
            ],
            "beta": -0.200633770475874,
            "referencePoint": 0.209846533953671
          },
          {
            "name": "DepIndMod_cat",
            "displayName": "Average deprivation",
            "extensions": {
              "units": "NA",
              "description":
                "Moderate level of neightbourhood deprivation- Dummy variable"
            },
            "fieldType": 2,
            "opType": "categorical",
            "categories": [
              {
                "value": "1",
                "displayValue": "Moderate neighbourhood deprivation",
                "description":
                  "3rd quinitle of neighbourhood social and material deprivation (Pampalon's deprivaiton index)"
              },
              { "value": "0", "displayValue": "Else", "description": "Else" }
            ],
            "beta": 0.0465870069699607,
            "referencePoint": 0.635538114524882
          },
          {
            "name": "DepIndHigh_cat",
            "displayName": "High deprivation",
            "extensions": {
              "units": "NA",
              "description":
                "High level of neighbourhood deprivation- Dummy variable"
            },
            "fieldType": 2,
            "opType": "categorical",
            "categories": [
              {
                "value": "1",
                "displayValue": "High neighbourhood deprivation",
                "description":
                  "4th or 5th quintile of neighbourhood social and material deprivation (Pampalon's deprivaiton index)"
              },
              { "value": "0", "displayValue": "Else", "description": "Else" }
            ],
            "beta": 0.204884993101581,
            "referencePoint": 0.168108932006613
          },
          {
            "name": "EduNoGrad_cat",
            "displayName": "<High school",
            "extensions": {
              "units": "NA",
              "description": "Less than high school education- Dummy variable"
            },
            "fieldType": 2,
            "opType": "categorical",
            "categories": [
              {
                "value": "1",
                "displayValue": "Less than high school graduation",
                "description": ""
              },
              { "value": "0", "displayValue": "Else", "description": "" }
            ],
            "beta": 0.063130759838211,
            "referencePoint": 0.186175149194564
          },
          {
            "name": "EduHSGrad_cat",
            "displayName": "High school ",
            "extensions": {
              "units": "NA",
              "description": "High school graduate- Dummy variable"
            },
            "fieldType": 2,
            "opType": "categorical",
            "categories": [
              {
                "value": "1",
                "displayValue": "High school graduate",
                "description": ""
              },
              { "value": "0", "displayValue": "Else", "description": "" }
            ],
            "beta": 0.0327085901623164,
            "referencePoint": 0.265105373462728
          },
          {
            "name": "Immig0to15_cat",
            "displayName": "Immigrate <15y",
            "extensions": {
              "units": "NA",
              "description": "Immigrated <15 years- Dummy variable"
            },
            "fieldType": 2,
            "opType": "categorical",
            "categories": [
              {
                "value": "1",
                "displayValue": "Immigrated <15 years",
                "description": ""
              },
              { "value": "0", "displayValue": "Else", "description": "" }
            ],
            "beta": -0.604221147677245,
            "referencePoint": 0.0375613833455229
          },
          {
            "name": "Immig16to30_cat",
            "displayName": "Immigrate 15-30y",
            "extensions": {
              "units": "NA",
              "description": "Immigrated 16 to 30 years- Dummy variable"
            },
            "fieldType": 2,
            "opType": "categorical",
            "categories": [
              {
                "value": "1",
                "displayValue": "Immigrated 16 to 30 years",
                "description": ""
              },
              { "value": "0", "displayValue": "Else", "description": "" }
            ],
            "beta": -0.226038245860603,
            "referencePoint": 0.0437872986411156
          },
          {
            "name": "Immig31to45_cat",
            "displayName": "Immigrate 31-45y",
            "extensions": {
              "units": "NA",
              "description": "Immigrated 31 to 45 years- Dummy variable"
            },
            "fieldType": 2,
            "opType": "categorical",
            "categories": [
              {
                "value": "1",
                "displayValue": "Immigrated 31 to 45 years",
                "description": ""
              },
              { "value": "0", "displayValue": "Else", "description": "" }
            ],
            "beta": -0.132506130017869,
            "referencePoint": 0.0547179900065762
          },
          {
            "name": "HeartDis_cat",
            "displayName": "Heart disease",
            "extensions": {
              "recommended": "true",
              "units": "NA",
              "description": "Has heart disease- Dummy variable"
            },
            "fieldType": 2,
            "opType": "categorical",
            "categories": [
              {
                "value": "1",
                "displayValue": "Has heart disease",
                "description": ""
              },
              {
                "value": "0",
                "displayValue": "Does not have heart disease",
                "description": ""
              }
            ],
            "beta": 0.341870654935853,
            "referencePoint": 0.0668102785989539
          },
          {
            "name": "Stroke_cat",
            "displayName": "Stroke",
            "extensions": {
              "recommended": "true",
              "units": "NA",
              "description":
                "Suffers from effects of a previous stroke- Dummy variable"
            },
            "fieldType": 2,
            "opType": "categorical",
            "categories": [
              {
                "value": "1",
                "displayValue": "Suffers from effects of a previous stroke",
                "description": ""
              },
              {
                "value": "0",
                "displayValue":
                  "Does not suffer from the effects of a previous stroke",
                "description": ""
              }
            ],
            "beta": 0.235906455174582,
            "referencePoint": 0.0132262287424634
          },
          {
            "name": "Cancer_cat",
            "displayName": "Cancer",
            "extensions": {
              "recommended": "true",
              "units": "NA",
              "description": "Has cancer- Dummy variable"
            },
            "fieldType": 2,
            "opType": "categorical",
            "categories": [
              { "value": "1", "displayValue": "Has cancer", "description": "" },
              {
                "value": "0",
                "displayValue": "Does not have cancer",
                "description": ""
              }
            ],
            "beta": 4.85671898618751,
            "referencePoint": 0.0222424357894866
          },
          {
            "name": "Diabetes_cat",
            "displayName": "Diabetes",
            "extensions": {
              "recommended": "true",
              "units": "NA",
              "description": "Has diabetes- Dummy variable"
            },
            "fieldType": 2,
            "opType": "categorical",
            "categories": [
              {
                "value": "1",
                "displayValue": "Has diabetes",
                "description": ""
              },
              {
                "value": "0",
                "displayValue": "Does not have diabetes",
                "description": ""
              }
            ],
            "beta": 1.16018072455526,
            "referencePoint": 0.0636297147633476
          }
        ]
      },
      "predicate": {
        "equation": "predicateResult = obj['sex'] === 'female'",
        "variables": ["sex"]
      }
    }
  ]
}
